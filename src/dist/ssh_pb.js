// source: ssh.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.proto.ssh.CommandRequest', null, global);
goog.exportSymbol('proto.proto.ssh.CommandResponse', null, global);
goog.exportSymbol('proto.proto.ssh.ConnectRequest', null, global);
goog.exportSymbol('proto.proto.ssh.ConnectResponse', null, global);
goog.exportSymbol('proto.proto.ssh.DisconnectRequest', null, global);
goog.exportSymbol('proto.proto.ssh.DisconnectResponse', null, global);
goog.exportSymbol('proto.proto.ssh.ErrorResponse', null, global);
goog.exportSymbol('proto.proto.ssh.Message', null, global);
goog.exportSymbol('proto.proto.ssh.Message.TypeCase', null, global);
goog.exportSymbol('proto.proto.ssh.Request', null, global);
goog.exportSymbol('proto.proto.ssh.Request.RequestCase', null, global);
goog.exportSymbol('proto.proto.ssh.Response', null, global);
goog.exportSymbol('proto.proto.ssh.Response.ResponseCase', null, global);
goog.exportSymbol('proto.proto.ssh.Response.Status', null, global);
goog.exportSymbol('proto.proto.ssh.WindowChangeRequest', null, global);
goog.exportSymbol('proto.proto.ssh.WindowChangeResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in placeholder and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ssh.Message = function (opt_data) {
	jspb.Message.initialize(
		this,
		opt_data,
		0,
		-1,
		null,
		proto.proto.ssh.Message.oneofGroups_,
	);
};
goog.inherits(proto.proto.ssh.Message, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.proto.ssh.Message.displayName = 'proto.proto.ssh.Message';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in placeholder and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ssh.Request = function (opt_data) {
	jspb.Message.initialize(
		this,
		opt_data,
		0,
		-1,
		null,
		proto.proto.ssh.Request.oneofGroups_,
	);
};
goog.inherits(proto.proto.ssh.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.proto.ssh.Request.displayName = 'proto.proto.ssh.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in placeholder and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ssh.ConnectRequest = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.ssh.ConnectRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.proto.ssh.ConnectRequest.displayName =
		'proto.proto.ssh.ConnectRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in placeholder and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ssh.DisconnectRequest = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.ssh.DisconnectRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.proto.ssh.DisconnectRequest.displayName =
		'proto.proto.ssh.DisconnectRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in placeholder and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ssh.CommandRequest = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.ssh.CommandRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.proto.ssh.CommandRequest.displayName =
		'proto.proto.ssh.CommandRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in placeholder and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ssh.WindowChangeRequest = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.ssh.WindowChangeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.proto.ssh.WindowChangeRequest.displayName =
		'proto.proto.ssh.WindowChangeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in placeholder and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ssh.Response = function (opt_data) {
	jspb.Message.initialize(
		this,
		opt_data,
		0,
		-1,
		null,
		proto.proto.ssh.Response.oneofGroups_,
	);
};
goog.inherits(proto.proto.ssh.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.proto.ssh.Response.displayName = 'proto.proto.ssh.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in placeholder and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ssh.ConnectResponse = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.ssh.ConnectResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.proto.ssh.ConnectResponse.displayName =
		'proto.proto.ssh.ConnectResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in placeholder and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ssh.DisconnectResponse = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.ssh.DisconnectResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.proto.ssh.DisconnectResponse.displayName =
		'proto.proto.ssh.DisconnectResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in placeholder and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ssh.CommandResponse = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.ssh.CommandResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.proto.ssh.CommandResponse.displayName =
		'proto.proto.ssh.CommandResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in placeholder and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ssh.WindowChangeResponse = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.ssh.WindowChangeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.proto.ssh.WindowChangeResponse.displayName =
		'proto.proto.ssh.WindowChangeResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in placeholder and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ssh.ErrorResponse = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.ssh.ErrorResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.proto.ssh.ErrorResponse.displayName = 'proto.proto.ssh.ErrorResponse';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.proto.ssh.Message.oneofGroups_ = [[1, 2]];

/**
 * @enum {number}
 */
proto.proto.ssh.Message.TypeCase = {
	TYPE_NOT_SET: 0,
	REQUEST: 1,
	RESPONSE: 2,
};

/**
 * @return {proto.proto.ssh.Message.TypeCase}
 */
proto.proto.ssh.Message.prototype.getTypeCase = function () {
	return /** @type {proto.proto.ssh.Message.TypeCase} */ (
		jspb.Message.computeOneofCase(
			this,
			proto.proto.ssh.Message.oneofGroups_[0],
		)
	);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.proto.ssh.Message.prototype.toObject = function (
		opt_includeInstance,
	) {
		return proto.proto.ssh.Message.toObject(opt_includeInstance, this);
	};

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.proto.ssh.Message} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.proto.ssh.Message.toObject = function (includeInstance, msg) {
		var f,
			obj = {
				request:
					(f = msg.getRequest()) &&
					proto.proto.ssh.Request.toObject(includeInstance, f),
				response:
					(f = msg.getResponse()) &&
					proto.proto.ssh.Response.toObject(includeInstance, f),
				version: jspb.Message.getFieldWithDefault(msg, 3, ''),
			};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ssh.Message}
 */
proto.proto.ssh.Message.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.proto.ssh.Message();
	return proto.proto.ssh.Message.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ssh.Message} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ssh.Message}
 */
proto.proto.ssh.Message.deserializeBinaryFromReader = function (msg, reader) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = new proto.proto.ssh.Request();
				reader.readMessage(
					value,
					proto.proto.ssh.Request.deserializeBinaryFromReader,
				);
				msg.setRequest(value);
				break;
			case 2:
				var value = new proto.proto.ssh.Response();
				reader.readMessage(
					value,
					proto.proto.ssh.Response.deserializeBinaryFromReader,
				);
				msg.setResponse(value);
				break;
			case 3:
				var value = /** @type {string} */ (reader.readString());
				msg.setVersion(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ssh.Message.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.proto.ssh.Message.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ssh.Message} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ssh.Message.serializeBinaryToWriter = function (message, writer) {
	var f = undefined;
	f = message.getRequest();
	if (f != null) {
		writer.writeMessage(
			1,
			f,
			proto.proto.ssh.Request.serializeBinaryToWriter,
		);
	}
	f = message.getResponse();
	if (f != null) {
		writer.writeMessage(
			2,
			f,
			proto.proto.ssh.Response.serializeBinaryToWriter,
		);
	}
	f = message.getVersion();
	if (f.length > 0) {
		writer.writeString(3, f);
	}
};

/**
 * optional Request request = 1;
 * @return {?proto.proto.ssh.Request}
 */
proto.proto.ssh.Message.prototype.getRequest = function () {
	return /** @type{?proto.proto.ssh.Request} */ (
		jspb.Message.getWrapperField(this, proto.proto.ssh.Request, 1)
	);
};

/**
 * @param {?proto.proto.ssh.Request|undefined} value
 * @return {!proto.proto.ssh.Message} returns this
 */
proto.proto.ssh.Message.prototype.setRequest = function (value) {
	return jspb.Message.setOneofWrapperField(
		this,
		1,
		proto.proto.ssh.Message.oneofGroups_[0],
		value,
	);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.ssh.Message} returns this
 */
proto.proto.ssh.Message.prototype.clearRequest = function () {
	return this.setRequest(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.ssh.Message.prototype.hasRequest = function () {
	return jspb.Message.getField(this, 1) != null;
};

/**
 * optional Response response = 2;
 * @return {?proto.proto.ssh.Response}
 */
proto.proto.ssh.Message.prototype.getResponse = function () {
	return /** @type{?proto.proto.ssh.Response} */ (
		jspb.Message.getWrapperField(this, proto.proto.ssh.Response, 2)
	);
};

/**
 * @param {?proto.proto.ssh.Response|undefined} value
 * @return {!proto.proto.ssh.Message} returns this
 */
proto.proto.ssh.Message.prototype.setResponse = function (value) {
	return jspb.Message.setOneofWrapperField(
		this,
		2,
		proto.proto.ssh.Message.oneofGroups_[0],
		value,
	);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.ssh.Message} returns this
 */
proto.proto.ssh.Message.prototype.clearResponse = function () {
	return this.setResponse(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.ssh.Message.prototype.hasResponse = function () {
	return jspb.Message.getField(this, 2) != null;
};

/**
 * optional string version = 3;
 * @return {string}
 */
proto.proto.ssh.Message.prototype.getVersion = function () {
	return /** @type {string} */ (
		jspb.Message.getFieldWithDefault(this, 3, '')
	);
};

/**
 * @param {string} value
 * @return {!proto.proto.ssh.Message} returns this
 */
proto.proto.ssh.Message.prototype.setVersion = function (value) {
	return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.proto.ssh.Request.oneofGroups_ = [[1, 2, 3, 4]];

/**
 * @enum {number}
 */
proto.proto.ssh.Request.RequestCase = {
	REQUEST_NOT_SET: 0,
	CONNECT: 1,
	DISCONNECT: 2,
	COMMAND: 3,
	WINDOWCHANGE: 4,
};

/**
 * @return {proto.proto.ssh.Request.RequestCase}
 */
proto.proto.ssh.Request.prototype.getRequestCase = function () {
	return /** @type {proto.proto.ssh.Request.RequestCase} */ (
		jspb.Message.computeOneofCase(
			this,
			proto.proto.ssh.Request.oneofGroups_[0],
		)
	);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.proto.ssh.Request.prototype.toObject = function (
		opt_includeInstance,
	) {
		return proto.proto.ssh.Request.toObject(opt_includeInstance, this);
	};

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.proto.ssh.Request} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.proto.ssh.Request.toObject = function (includeInstance, msg) {
		var f,
			obj = {
				connect:
					(f = msg.getConnect()) &&
					proto.proto.ssh.ConnectRequest.toObject(includeInstance, f),
				disconnect:
					(f = msg.getDisconnect()) &&
					proto.proto.ssh.DisconnectRequest.toObject(
						includeInstance,
						f,
					),
				command:
					(f = msg.getCommand()) &&
					proto.proto.ssh.CommandRequest.toObject(includeInstance, f),
				windowchange:
					(f = msg.getWindowchange()) &&
					proto.proto.ssh.WindowChangeRequest.toObject(
						includeInstance,
						f,
					),
			};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ssh.Request}
 */
proto.proto.ssh.Request.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.proto.ssh.Request();
	return proto.proto.ssh.Request.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ssh.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ssh.Request}
 */
proto.proto.ssh.Request.deserializeBinaryFromReader = function (msg, reader) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = new proto.proto.ssh.ConnectRequest();
				reader.readMessage(
					value,
					proto.proto.ssh.ConnectRequest.deserializeBinaryFromReader,
				);
				msg.setConnect(value);
				break;
			case 2:
				var value = new proto.proto.ssh.DisconnectRequest();
				reader.readMessage(
					value,
					proto.proto.ssh.DisconnectRequest
						.deserializeBinaryFromReader,
				);
				msg.setDisconnect(value);
				break;
			case 3:
				var value = new proto.proto.ssh.CommandRequest();
				reader.readMessage(
					value,
					proto.proto.ssh.CommandRequest.deserializeBinaryFromReader,
				);
				msg.setCommand(value);
				break;
			case 4:
				var value = new proto.proto.ssh.WindowChangeRequest();
				reader.readMessage(
					value,
					proto.proto.ssh.WindowChangeRequest
						.deserializeBinaryFromReader,
				);
				msg.setWindowchange(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ssh.Request.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.proto.ssh.Request.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ssh.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ssh.Request.serializeBinaryToWriter = function (message, writer) {
	var f = undefined;
	f = message.getConnect();
	if (f != null) {
		writer.writeMessage(
			1,
			f,
			proto.proto.ssh.ConnectRequest.serializeBinaryToWriter,
		);
	}
	f = message.getDisconnect();
	if (f != null) {
		writer.writeMessage(
			2,
			f,
			proto.proto.ssh.DisconnectRequest.serializeBinaryToWriter,
		);
	}
	f = message.getCommand();
	if (f != null) {
		writer.writeMessage(
			3,
			f,
			proto.proto.ssh.CommandRequest.serializeBinaryToWriter,
		);
	}
	f = message.getWindowchange();
	if (f != null) {
		writer.writeMessage(
			4,
			f,
			proto.proto.ssh.WindowChangeRequest.serializeBinaryToWriter,
		);
	}
};

/**
 * optional ConnectRequest connect = 1;
 * @return {?proto.proto.ssh.ConnectRequest}
 */
proto.proto.ssh.Request.prototype.getConnect = function () {
	return /** @type{?proto.proto.ssh.ConnectRequest} */ (
		jspb.Message.getWrapperField(this, proto.proto.ssh.ConnectRequest, 1)
	);
};

/**
 * @param {?proto.proto.ssh.ConnectRequest|undefined} value
 * @return {!proto.proto.ssh.Request} returns this
 */
proto.proto.ssh.Request.prototype.setConnect = function (value) {
	return jspb.Message.setOneofWrapperField(
		this,
		1,
		proto.proto.ssh.Request.oneofGroups_[0],
		value,
	);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.ssh.Request} returns this
 */
proto.proto.ssh.Request.prototype.clearConnect = function () {
	return this.setConnect(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.ssh.Request.prototype.hasConnect = function () {
	return jspb.Message.getField(this, 1) != null;
};

/**
 * optional DisconnectRequest disconnect = 2;
 * @return {?proto.proto.ssh.DisconnectRequest}
 */
proto.proto.ssh.Request.prototype.getDisconnect = function () {
	return /** @type{?proto.proto.ssh.DisconnectRequest} */ (
		jspb.Message.getWrapperField(this, proto.proto.ssh.DisconnectRequest, 2)
	);
};

/**
 * @param {?proto.proto.ssh.DisconnectRequest|undefined} value
 * @return {!proto.proto.ssh.Request} returns this
 */
proto.proto.ssh.Request.prototype.setDisconnect = function (value) {
	return jspb.Message.setOneofWrapperField(
		this,
		2,
		proto.proto.ssh.Request.oneofGroups_[0],
		value,
	);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.ssh.Request} returns this
 */
proto.proto.ssh.Request.prototype.clearDisconnect = function () {
	return this.setDisconnect(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.ssh.Request.prototype.hasDisconnect = function () {
	return jspb.Message.getField(this, 2) != null;
};

/**
 * optional CommandRequest command = 3;
 * @return {?proto.proto.ssh.CommandRequest}
 */
proto.proto.ssh.Request.prototype.getCommand = function () {
	return /** @type{?proto.proto.ssh.CommandRequest} */ (
		jspb.Message.getWrapperField(this, proto.proto.ssh.CommandRequest, 3)
	);
};

/**
 * @param {?proto.proto.ssh.CommandRequest|undefined} value
 * @return {!proto.proto.ssh.Request} returns this
 */
proto.proto.ssh.Request.prototype.setCommand = function (value) {
	return jspb.Message.setOneofWrapperField(
		this,
		3,
		proto.proto.ssh.Request.oneofGroups_[0],
		value,
	);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.ssh.Request} returns this
 */
proto.proto.ssh.Request.prototype.clearCommand = function () {
	return this.setCommand(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.ssh.Request.prototype.hasCommand = function () {
	return jspb.Message.getField(this, 3) != null;
};

/**
 * optional WindowChangeRequest windowChange = 4;
 * @return {?proto.proto.ssh.WindowChangeRequest}
 */
proto.proto.ssh.Request.prototype.getWindowchange = function () {
	return /** @type{?proto.proto.ssh.WindowChangeRequest} */ (
		jspb.Message.getWrapperField(
			this,
			proto.proto.ssh.WindowChangeRequest,
			4,
		)
	);
};

/**
 * @param {?proto.proto.ssh.WindowChangeRequest|undefined} value
 * @return {!proto.proto.ssh.Request} returns this
 */
proto.proto.ssh.Request.prototype.setWindowchange = function (value) {
	return jspb.Message.setOneofWrapperField(
		this,
		4,
		proto.proto.ssh.Request.oneofGroups_[0],
		value,
	);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.ssh.Request} returns this
 */
proto.proto.ssh.Request.prototype.clearWindowchange = function () {
	return this.setWindowchange(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.ssh.Request.prototype.hasWindowchange = function () {
	return jspb.Message.getField(this, 4) != null;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.proto.ssh.ConnectRequest.prototype.toObject = function (
		opt_includeInstance,
	) {
		return proto.proto.ssh.ConnectRequest.toObject(
			opt_includeInstance,
			this,
		);
	};

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.proto.ssh.ConnectRequest} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.proto.ssh.ConnectRequest.toObject = function (includeInstance, msg) {
		var f,
			obj = {
				token: jspb.Message.getFieldWithDefault(msg, 1, ''),
				host: jspb.Message.getFieldWithDefault(msg, 2, ''),
				user: jspb.Message.getFieldWithDefault(msg, 3, ''),
				password: jspb.Message.getFieldWithDefault(msg, 4, ''),
				port: jspb.Message.getFieldWithDefault(msg, 5, 0),
				terminaltype: jspb.Message.getFieldWithDefault(msg, 6, ''),
				terminalcols: jspb.Message.getFieldWithDefault(msg, 7, 0),
				terminalrows: jspb.Message.getFieldWithDefault(msg, 8, 0),
				terminalwidth: jspb.Message.getFieldWithDefault(msg, 9, 0),
				terminalheight: jspb.Message.getFieldWithDefault(msg, 10, 0),
				keepalivecount: jspb.Message.getFieldWithDefault(msg, 11, 0),
				keepaliveinterval: jspb.Message.getFieldWithDefault(msg, 12, 0),
			};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ssh.ConnectRequest}
 */
proto.proto.ssh.ConnectRequest.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.proto.ssh.ConnectRequest();
	return proto.proto.ssh.ConnectRequest.deserializeBinaryFromReader(
		msg,
		reader,
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ssh.ConnectRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ssh.ConnectRequest}
 */
proto.proto.ssh.ConnectRequest.deserializeBinaryFromReader = function (
	msg,
	reader,
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {string} */ (reader.readString());
				msg.setToken(value);
				break;
			case 2:
				var value = /** @type {string} */ (reader.readString());
				msg.setHost(value);
				break;
			case 3:
				var value = /** @type {string} */ (reader.readString());
				msg.setUser(value);
				break;
			case 4:
				var value = /** @type {string} */ (reader.readString());
				msg.setPassword(value);
				break;
			case 5:
				var value = /** @type {number} */ (reader.readInt32());
				msg.setPort(value);
				break;
			case 6:
				var value = /** @type {string} */ (reader.readString());
				msg.setTerminaltype(value);
				break;
			case 7:
				var value = /** @type {number} */ (reader.readInt32());
				msg.setTerminalcols(value);
				break;
			case 8:
				var value = /** @type {number} */ (reader.readInt32());
				msg.setTerminalrows(value);
				break;
			case 9:
				var value = /** @type {number} */ (reader.readInt32());
				msg.setTerminalwidth(value);
				break;
			case 10:
				var value = /** @type {number} */ (reader.readInt32());
				msg.setTerminalheight(value);
				break;
			case 11:
				var value = /** @type {number} */ (reader.readInt32());
				msg.setKeepalivecount(value);
				break;
			case 12:
				var value = /** @type {number} */ (reader.readInt32());
				msg.setKeepaliveinterval(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ssh.ConnectRequest.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.proto.ssh.ConnectRequest.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ssh.ConnectRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ssh.ConnectRequest.serializeBinaryToWriter = function (
	message,
	writer,
) {
	var f = undefined;
	f = message.getToken();
	if (f.length > 0) {
		writer.writeString(1, f);
	}
	f = message.getHost();
	if (f.length > 0) {
		writer.writeString(2, f);
	}
	f = message.getUser();
	if (f.length > 0) {
		writer.writeString(3, f);
	}
	f = message.getPassword();
	if (f.length > 0) {
		writer.writeString(4, f);
	}
	f = message.getPort();
	if (f !== 0) {
		writer.writeInt32(5, f);
	}
	f = message.getTerminaltype();
	if (f.length > 0) {
		writer.writeString(6, f);
	}
	f = message.getTerminalcols();
	if (f !== 0) {
		writer.writeInt32(7, f);
	}
	f = message.getTerminalrows();
	if (f !== 0) {
		writer.writeInt32(8, f);
	}
	f = message.getTerminalwidth();
	if (f !== 0) {
		writer.writeInt32(9, f);
	}
	f = message.getTerminalheight();
	if (f !== 0) {
		writer.writeInt32(10, f);
	}
	f = message.getKeepalivecount();
	if (f !== 0) {
		writer.writeInt32(11, f);
	}
	f = message.getKeepaliveinterval();
	if (f !== 0) {
		writer.writeInt32(12, f);
	}
};

/**
 * optional string token = 1;
 * @return {string}
 */
proto.proto.ssh.ConnectRequest.prototype.getToken = function () {
	return /** @type {string} */ (
		jspb.Message.getFieldWithDefault(this, 1, '')
	);
};

/**
 * @param {string} value
 * @return {!proto.proto.ssh.ConnectRequest} returns this
 */
proto.proto.ssh.ConnectRequest.prototype.setToken = function (value) {
	return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string host = 2;
 * @return {string}
 */
proto.proto.ssh.ConnectRequest.prototype.getHost = function () {
	return /** @type {string} */ (
		jspb.Message.getFieldWithDefault(this, 2, '')
	);
};

/**
 * @param {string} value
 * @return {!proto.proto.ssh.ConnectRequest} returns this
 */
proto.proto.ssh.ConnectRequest.prototype.setHost = function (value) {
	return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string user = 3;
 * @return {string}
 */
proto.proto.ssh.ConnectRequest.prototype.getUser = function () {
	return /** @type {string} */ (
		jspb.Message.getFieldWithDefault(this, 3, '')
	);
};

/**
 * @param {string} value
 * @return {!proto.proto.ssh.ConnectRequest} returns this
 */
proto.proto.ssh.ConnectRequest.prototype.setUser = function (value) {
	return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional string password = 4;
 * @return {string}
 */
proto.proto.ssh.ConnectRequest.prototype.getPassword = function () {
	return /** @type {string} */ (
		jspb.Message.getFieldWithDefault(this, 4, '')
	);
};

/**
 * @param {string} value
 * @return {!proto.proto.ssh.ConnectRequest} returns this
 */
proto.proto.ssh.ConnectRequest.prototype.setPassword = function (value) {
	return jspb.Message.setProto3StringField(this, 4, value);
};

/**
 * optional int32 port = 5;
 * @return {number}
 */
proto.proto.ssh.ConnectRequest.prototype.getPort = function () {
	return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};

/**
 * @param {number} value
 * @return {!proto.proto.ssh.ConnectRequest} returns this
 */
proto.proto.ssh.ConnectRequest.prototype.setPort = function (value) {
	return jspb.Message.setProto3IntField(this, 5, value);
};

/**
 * optional string terminalType = 6;
 * @return {string}
 */
proto.proto.ssh.ConnectRequest.prototype.getTerminaltype = function () {
	return /** @type {string} */ (
		jspb.Message.getFieldWithDefault(this, 6, '')
	);
};

/**
 * @param {string} value
 * @return {!proto.proto.ssh.ConnectRequest} returns this
 */
proto.proto.ssh.ConnectRequest.prototype.setTerminaltype = function (value) {
	return jspb.Message.setProto3StringField(this, 6, value);
};

/**
 * optional int32 terminalCols = 7;
 * @return {number}
 */
proto.proto.ssh.ConnectRequest.prototype.getTerminalcols = function () {
	return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};

/**
 * @param {number} value
 * @return {!proto.proto.ssh.ConnectRequest} returns this
 */
proto.proto.ssh.ConnectRequest.prototype.setTerminalcols = function (value) {
	return jspb.Message.setProto3IntField(this, 7, value);
};

/**
 * optional int32 terminalRows = 8;
 * @return {number}
 */
proto.proto.ssh.ConnectRequest.prototype.getTerminalrows = function () {
	return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};

/**
 * @param {number} value
 * @return {!proto.proto.ssh.ConnectRequest} returns this
 */
proto.proto.ssh.ConnectRequest.prototype.setTerminalrows = function (value) {
	return jspb.Message.setProto3IntField(this, 8, value);
};

/**
 * optional int32 terminalWidth = 9;
 * @return {number}
 */
proto.proto.ssh.ConnectRequest.prototype.getTerminalwidth = function () {
	return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};

/**
 * @param {number} value
 * @return {!proto.proto.ssh.ConnectRequest} returns this
 */
proto.proto.ssh.ConnectRequest.prototype.setTerminalwidth = function (value) {
	return jspb.Message.setProto3IntField(this, 9, value);
};

/**
 * optional int32 terminalHeight = 10;
 * @return {number}
 */
proto.proto.ssh.ConnectRequest.prototype.getTerminalheight = function () {
	return /** @type {number} */ (
		jspb.Message.getFieldWithDefault(this, 10, 0)
	);
};

/**
 * @param {number} value
 * @return {!proto.proto.ssh.ConnectRequest} returns this
 */
proto.proto.ssh.ConnectRequest.prototype.setTerminalheight = function (value) {
	return jspb.Message.setProto3IntField(this, 10, value);
};

/**
 * optional int32 keepAliveCount = 11;
 * @return {number}
 */
proto.proto.ssh.ConnectRequest.prototype.getKeepalivecount = function () {
	return /** @type {number} */ (
		jspb.Message.getFieldWithDefault(this, 11, 0)
	);
};

/**
 * @param {number} value
 * @return {!proto.proto.ssh.ConnectRequest} returns this
 */
proto.proto.ssh.ConnectRequest.prototype.setKeepalivecount = function (value) {
	return jspb.Message.setProto3IntField(this, 11, value);
};

/**
 * optional int32 keepAliveInterval = 12;
 * @return {number}
 */
proto.proto.ssh.ConnectRequest.prototype.getKeepaliveinterval = function () {
	return /** @type {number} */ (
		jspb.Message.getFieldWithDefault(this, 12, 0)
	);
};

/**
 * @param {number} value
 * @return {!proto.proto.ssh.ConnectRequest} returns this
 */
proto.proto.ssh.ConnectRequest.prototype.setKeepaliveinterval = function (
	value,
) {
	return jspb.Message.setProto3IntField(this, 12, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.proto.ssh.DisconnectRequest.prototype.toObject = function (
		opt_includeInstance,
	) {
		return proto.proto.ssh.DisconnectRequest.toObject(
			opt_includeInstance,
			this,
		);
	};

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.proto.ssh.DisconnectRequest} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.proto.ssh.DisconnectRequest.toObject = function (
		includeInstance,
		msg,
	) {
		var f,
			obj = {};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ssh.DisconnectRequest}
 */
proto.proto.ssh.DisconnectRequest.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.proto.ssh.DisconnectRequest();
	return proto.proto.ssh.DisconnectRequest.deserializeBinaryFromReader(
		msg,
		reader,
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ssh.DisconnectRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ssh.DisconnectRequest}
 */
proto.proto.ssh.DisconnectRequest.deserializeBinaryFromReader = function (
	msg,
	reader,
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ssh.DisconnectRequest.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.proto.ssh.DisconnectRequest.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ssh.DisconnectRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ssh.DisconnectRequest.serializeBinaryToWriter = function (
	message,
	writer,
) {
	var f = undefined;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.proto.ssh.CommandRequest.prototype.toObject = function (
		opt_includeInstance,
	) {
		return proto.proto.ssh.CommandRequest.toObject(
			opt_includeInstance,
			this,
		);
	};

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.proto.ssh.CommandRequest} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.proto.ssh.CommandRequest.toObject = function (includeInstance, msg) {
		var f,
			obj = {
				message: jspb.Message.getFieldWithDefault(msg, 1, ''),
			};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ssh.CommandRequest}
 */
proto.proto.ssh.CommandRequest.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.proto.ssh.CommandRequest();
	return proto.proto.ssh.CommandRequest.deserializeBinaryFromReader(
		msg,
		reader,
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ssh.CommandRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ssh.CommandRequest}
 */
proto.proto.ssh.CommandRequest.deserializeBinaryFromReader = function (
	msg,
	reader,
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {string} */ (reader.readString());
				msg.setMessage(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ssh.CommandRequest.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.proto.ssh.CommandRequest.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ssh.CommandRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ssh.CommandRequest.serializeBinaryToWriter = function (
	message,
	writer,
) {
	var f = undefined;
	f = message.getMessage();
	if (f.length > 0) {
		writer.writeString(1, f);
	}
};

/**
 * optional string message = 1;
 * @return {string}
 */
proto.proto.ssh.CommandRequest.prototype.getMessage = function () {
	return /** @type {string} */ (
		jspb.Message.getFieldWithDefault(this, 1, '')
	);
};

/**
 * @param {string} value
 * @return {!proto.proto.ssh.CommandRequest} returns this
 */
proto.proto.ssh.CommandRequest.prototype.setMessage = function (value) {
	return jspb.Message.setProto3StringField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.proto.ssh.WindowChangeRequest.prototype.toObject = function (
		opt_includeInstance,
	) {
		return proto.proto.ssh.WindowChangeRequest.toObject(
			opt_includeInstance,
			this,
		);
	};

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.proto.ssh.WindowChangeRequest} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.proto.ssh.WindowChangeRequest.toObject = function (
		includeInstance,
		msg,
	) {
		var f,
			obj = {
				cols: jspb.Message.getFieldWithDefault(msg, 1, 0),
				rows: jspb.Message.getFieldWithDefault(msg, 2, 0),
				width: jspb.Message.getFieldWithDefault(msg, 3, 0),
				height: jspb.Message.getFieldWithDefault(msg, 4, 0),
			};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ssh.WindowChangeRequest}
 */
proto.proto.ssh.WindowChangeRequest.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.proto.ssh.WindowChangeRequest();
	return proto.proto.ssh.WindowChangeRequest.deserializeBinaryFromReader(
		msg,
		reader,
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ssh.WindowChangeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ssh.WindowChangeRequest}
 */
proto.proto.ssh.WindowChangeRequest.deserializeBinaryFromReader = function (
	msg,
	reader,
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {number} */ (reader.readInt32());
				msg.setCols(value);
				break;
			case 2:
				var value = /** @type {number} */ (reader.readInt32());
				msg.setRows(value);
				break;
			case 3:
				var value = /** @type {number} */ (reader.readInt32());
				msg.setWidth(value);
				break;
			case 4:
				var value = /** @type {number} */ (reader.readInt32());
				msg.setHeight(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ssh.WindowChangeRequest.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.proto.ssh.WindowChangeRequest.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ssh.WindowChangeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ssh.WindowChangeRequest.serializeBinaryToWriter = function (
	message,
	writer,
) {
	var f = undefined;
	f = message.getCols();
	if (f !== 0) {
		writer.writeInt32(1, f);
	}
	f = message.getRows();
	if (f !== 0) {
		writer.writeInt32(2, f);
	}
	f = message.getWidth();
	if (f !== 0) {
		writer.writeInt32(3, f);
	}
	f = message.getHeight();
	if (f !== 0) {
		writer.writeInt32(4, f);
	}
};

/**
 * optional int32 cols = 1;
 * @return {number}
 */
proto.proto.ssh.WindowChangeRequest.prototype.getCols = function () {
	return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.proto.ssh.WindowChangeRequest} returns this
 */
proto.proto.ssh.WindowChangeRequest.prototype.setCols = function (value) {
	return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional int32 rows = 2;
 * @return {number}
 */
proto.proto.ssh.WindowChangeRequest.prototype.getRows = function () {
	return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {number} value
 * @return {!proto.proto.ssh.WindowChangeRequest} returns this
 */
proto.proto.ssh.WindowChangeRequest.prototype.setRows = function (value) {
	return jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * optional int32 width = 3;
 * @return {number}
 */
proto.proto.ssh.WindowChangeRequest.prototype.getWidth = function () {
	return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/**
 * @param {number} value
 * @return {!proto.proto.ssh.WindowChangeRequest} returns this
 */
proto.proto.ssh.WindowChangeRequest.prototype.setWidth = function (value) {
	return jspb.Message.setProto3IntField(this, 3, value);
};

/**
 * optional int32 height = 4;
 * @return {number}
 */
proto.proto.ssh.WindowChangeRequest.prototype.getHeight = function () {
	return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};

/**
 * @param {number} value
 * @return {!proto.proto.ssh.WindowChangeRequest} returns this
 */
proto.proto.ssh.WindowChangeRequest.prototype.setHeight = function (value) {
	return jspb.Message.setProto3IntField(this, 4, value);
};

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.proto.ssh.Response.oneofGroups_ = [[1, 2, 3, 4, 5]];

/**
 * @enum {number}
 */
proto.proto.ssh.Response.ResponseCase = {
	RESPONSE_NOT_SET: 0,
	CONNECT: 1,
	DISCONNECT: 2,
	COMMAND: 3,
	WINDOWCHANGE: 4,
	ERROR: 5,
};

/**
 * @return {proto.proto.ssh.Response.ResponseCase}
 */
proto.proto.ssh.Response.prototype.getResponseCase = function () {
	return /** @type {proto.proto.ssh.Response.ResponseCase} */ (
		jspb.Message.computeOneofCase(
			this,
			proto.proto.ssh.Response.oneofGroups_[0],
		)
	);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.proto.ssh.Response.prototype.toObject = function (
		opt_includeInstance,
	) {
		return proto.proto.ssh.Response.toObject(opt_includeInstance, this);
	};

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.proto.ssh.Response} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.proto.ssh.Response.toObject = function (includeInstance, msg) {
		var f,
			obj = {
				connect:
					(f = msg.getConnect()) &&
					proto.proto.ssh.ConnectResponse.toObject(
						includeInstance,
						f,
					),
				disconnect:
					(f = msg.getDisconnect()) &&
					proto.proto.ssh.DisconnectResponse.toObject(
						includeInstance,
						f,
					),
				command:
					(f = msg.getCommand()) &&
					proto.proto.ssh.CommandResponse.toObject(
						includeInstance,
						f,
					),
				windowchange:
					(f = msg.getWindowchange()) &&
					proto.proto.ssh.WindowChangeResponse.toObject(
						includeInstance,
						f,
					),
				error:
					(f = msg.getError()) &&
					proto.proto.ssh.ErrorResponse.toObject(includeInstance, f),
				status: jspb.Message.getFieldWithDefault(msg, 6, 0),
				requestid: jspb.Message.getFieldWithDefault(msg, 7, ''),
			};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ssh.Response}
 */
proto.proto.ssh.Response.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.proto.ssh.Response();
	return proto.proto.ssh.Response.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ssh.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ssh.Response}
 */
proto.proto.ssh.Response.deserializeBinaryFromReader = function (msg, reader) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = new proto.proto.ssh.ConnectResponse();
				reader.readMessage(
					value,
					proto.proto.ssh.ConnectResponse.deserializeBinaryFromReader,
				);
				msg.setConnect(value);
				break;
			case 2:
				var value = new proto.proto.ssh.DisconnectResponse();
				reader.readMessage(
					value,
					proto.proto.ssh.DisconnectResponse
						.deserializeBinaryFromReader,
				);
				msg.setDisconnect(value);
				break;
			case 3:
				var value = new proto.proto.ssh.CommandResponse();
				reader.readMessage(
					value,
					proto.proto.ssh.CommandResponse.deserializeBinaryFromReader,
				);
				msg.setCommand(value);
				break;
			case 4:
				var value = new proto.proto.ssh.WindowChangeResponse();
				reader.readMessage(
					value,
					proto.proto.ssh.WindowChangeResponse
						.deserializeBinaryFromReader,
				);
				msg.setWindowchange(value);
				break;
			case 5:
				var value = new proto.proto.ssh.ErrorResponse();
				reader.readMessage(
					value,
					proto.proto.ssh.ErrorResponse.deserializeBinaryFromReader,
				);
				msg.setError(value);
				break;
			case 6:
				var value = /** @type {!proto.proto.ssh.Response.Status} */ (
					reader.readEnum()
				);
				msg.setStatus(value);
				break;
			case 7:
				var value = /** @type {string} */ (reader.readString());
				msg.setRequestid(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ssh.Response.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.proto.ssh.Response.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ssh.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ssh.Response.serializeBinaryToWriter = function (message, writer) {
	var f = undefined;
	f = message.getConnect();
	if (f != null) {
		writer.writeMessage(
			1,
			f,
			proto.proto.ssh.ConnectResponse.serializeBinaryToWriter,
		);
	}
	f = message.getDisconnect();
	if (f != null) {
		writer.writeMessage(
			2,
			f,
			proto.proto.ssh.DisconnectResponse.serializeBinaryToWriter,
		);
	}
	f = message.getCommand();
	if (f != null) {
		writer.writeMessage(
			3,
			f,
			proto.proto.ssh.CommandResponse.serializeBinaryToWriter,
		);
	}
	f = message.getWindowchange();
	if (f != null) {
		writer.writeMessage(
			4,
			f,
			proto.proto.ssh.WindowChangeResponse.serializeBinaryToWriter,
		);
	}
	f = message.getError();
	if (f != null) {
		writer.writeMessage(
			5,
			f,
			proto.proto.ssh.ErrorResponse.serializeBinaryToWriter,
		);
	}
	f = message.getStatus();
	if (f !== 0.0) {
		writer.writeEnum(6, f);
	}
	f = message.getRequestid();
	if (f.length > 0) {
		writer.writeString(7, f);
	}
};

/**
 * @enum {number}
 */
proto.proto.ssh.Response.Status = {
	UNKNOWN: 0,
	CONTINUE: 100,
	OK: 200,
	BAD_REQUEST: 400,
	UNAUTHORIZED: 401,
	FORBIDDEN: 403,
	REQUEST_TIMEOUT: 408,
	INTERNAL_ERROR: 500,
	SERVER_BUSY: 504,
};

/**
 * optional ConnectResponse connect = 1;
 * @return {?proto.proto.ssh.ConnectResponse}
 */
proto.proto.ssh.Response.prototype.getConnect = function () {
	return /** @type{?proto.proto.ssh.ConnectResponse} */ (
		jspb.Message.getWrapperField(this, proto.proto.ssh.ConnectResponse, 1)
	);
};

/**
 * @param {?proto.proto.ssh.ConnectResponse|undefined} value
 * @return {!proto.proto.ssh.Response} returns this
 */
proto.proto.ssh.Response.prototype.setConnect = function (value) {
	return jspb.Message.setOneofWrapperField(
		this,
		1,
		proto.proto.ssh.Response.oneofGroups_[0],
		value,
	);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.ssh.Response} returns this
 */
proto.proto.ssh.Response.prototype.clearConnect = function () {
	return this.setConnect(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.ssh.Response.prototype.hasConnect = function () {
	return jspb.Message.getField(this, 1) != null;
};

/**
 * optional DisconnectResponse disconnect = 2;
 * @return {?proto.proto.ssh.DisconnectResponse}
 */
proto.proto.ssh.Response.prototype.getDisconnect = function () {
	return /** @type{?proto.proto.ssh.DisconnectResponse} */ (
		jspb.Message.getWrapperField(
			this,
			proto.proto.ssh.DisconnectResponse,
			2,
		)
	);
};

/**
 * @param {?proto.proto.ssh.DisconnectResponse|undefined} value
 * @return {!proto.proto.ssh.Response} returns this
 */
proto.proto.ssh.Response.prototype.setDisconnect = function (value) {
	return jspb.Message.setOneofWrapperField(
		this,
		2,
		proto.proto.ssh.Response.oneofGroups_[0],
		value,
	);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.ssh.Response} returns this
 */
proto.proto.ssh.Response.prototype.clearDisconnect = function () {
	return this.setDisconnect(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.ssh.Response.prototype.hasDisconnect = function () {
	return jspb.Message.getField(this, 2) != null;
};

/**
 * optional CommandResponse command = 3;
 * @return {?proto.proto.ssh.CommandResponse}
 */
proto.proto.ssh.Response.prototype.getCommand = function () {
	return /** @type{?proto.proto.ssh.CommandResponse} */ (
		jspb.Message.getWrapperField(this, proto.proto.ssh.CommandResponse, 3)
	);
};

/**
 * @param {?proto.proto.ssh.CommandResponse|undefined} value
 * @return {!proto.proto.ssh.Response} returns this
 */
proto.proto.ssh.Response.prototype.setCommand = function (value) {
	return jspb.Message.setOneofWrapperField(
		this,
		3,
		proto.proto.ssh.Response.oneofGroups_[0],
		value,
	);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.ssh.Response} returns this
 */
proto.proto.ssh.Response.prototype.clearCommand = function () {
	return this.setCommand(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.ssh.Response.prototype.hasCommand = function () {
	return jspb.Message.getField(this, 3) != null;
};

/**
 * optional WindowChangeResponse windowChange = 4;
 * @return {?proto.proto.ssh.WindowChangeResponse}
 */
proto.proto.ssh.Response.prototype.getWindowchange = function () {
	return /** @type{?proto.proto.ssh.WindowChangeResponse} */ (
		jspb.Message.getWrapperField(
			this,
			proto.proto.ssh.WindowChangeResponse,
			4,
		)
	);
};

/**
 * @param {?proto.proto.ssh.WindowChangeResponse|undefined} value
 * @return {!proto.proto.ssh.Response} returns this
 */
proto.proto.ssh.Response.prototype.setWindowchange = function (value) {
	return jspb.Message.setOneofWrapperField(
		this,
		4,
		proto.proto.ssh.Response.oneofGroups_[0],
		value,
	);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.ssh.Response} returns this
 */
proto.proto.ssh.Response.prototype.clearWindowchange = function () {
	return this.setWindowchange(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.ssh.Response.prototype.hasWindowchange = function () {
	return jspb.Message.getField(this, 4) != null;
};

/**
 * optional ErrorResponse error = 5;
 * @return {?proto.proto.ssh.ErrorResponse}
 */
proto.proto.ssh.Response.prototype.getError = function () {
	return /** @type{?proto.proto.ssh.ErrorResponse} */ (
		jspb.Message.getWrapperField(this, proto.proto.ssh.ErrorResponse, 5)
	);
};

/**
 * @param {?proto.proto.ssh.ErrorResponse|undefined} value
 * @return {!proto.proto.ssh.Response} returns this
 */
proto.proto.ssh.Response.prototype.setError = function (value) {
	return jspb.Message.setOneofWrapperField(
		this,
		5,
		proto.proto.ssh.Response.oneofGroups_[0],
		value,
	);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.ssh.Response} returns this
 */
proto.proto.ssh.Response.prototype.clearError = function () {
	return this.setError(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.ssh.Response.prototype.hasError = function () {
	return jspb.Message.getField(this, 5) != null;
};

/**
 * optional Status status = 6;
 * @return {!proto.proto.ssh.Response.Status}
 */
proto.proto.ssh.Response.prototype.getStatus = function () {
	return /** @type {!proto.proto.ssh.Response.Status} */ (
		jspb.Message.getFieldWithDefault(this, 6, 0)
	);
};

/**
 * @param {!proto.proto.ssh.Response.Status} value
 * @return {!proto.proto.ssh.Response} returns this
 */
proto.proto.ssh.Response.prototype.setStatus = function (value) {
	return jspb.Message.setProto3EnumField(this, 6, value);
};

/**
 * optional string requestId = 7;
 * @return {string}
 */
proto.proto.ssh.Response.prototype.getRequestid = function () {
	return /** @type {string} */ (
		jspb.Message.getFieldWithDefault(this, 7, '')
	);
};

/**
 * @param {string} value
 * @return {!proto.proto.ssh.Response} returns this
 */
proto.proto.ssh.Response.prototype.setRequestid = function (value) {
	return jspb.Message.setProto3StringField(this, 7, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.proto.ssh.ConnectResponse.prototype.toObject = function (
		opt_includeInstance,
	) {
		return proto.proto.ssh.ConnectResponse.toObject(
			opt_includeInstance,
			this,
		);
	};

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.proto.ssh.ConnectResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.proto.ssh.ConnectResponse.toObject = function (includeInstance, msg) {
		var f,
			obj = {
				uuid: jspb.Message.getFieldWithDefault(msg, 1, ''),
			};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ssh.ConnectResponse}
 */
proto.proto.ssh.ConnectResponse.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.proto.ssh.ConnectResponse();
	return proto.proto.ssh.ConnectResponse.deserializeBinaryFromReader(
		msg,
		reader,
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ssh.ConnectResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ssh.ConnectResponse}
 */
proto.proto.ssh.ConnectResponse.deserializeBinaryFromReader = function (
	msg,
	reader,
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {string} */ (reader.readString());
				msg.setUuid(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ssh.ConnectResponse.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.proto.ssh.ConnectResponse.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ssh.ConnectResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ssh.ConnectResponse.serializeBinaryToWriter = function (
	message,
	writer,
) {
	var f = undefined;
	f = message.getUuid();
	if (f.length > 0) {
		writer.writeString(1, f);
	}
};

/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.proto.ssh.ConnectResponse.prototype.getUuid = function () {
	return /** @type {string} */ (
		jspb.Message.getFieldWithDefault(this, 1, '')
	);
};

/**
 * @param {string} value
 * @return {!proto.proto.ssh.ConnectResponse} returns this
 */
proto.proto.ssh.ConnectResponse.prototype.setUuid = function (value) {
	return jspb.Message.setProto3StringField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.proto.ssh.DisconnectResponse.prototype.toObject = function (
		opt_includeInstance,
	) {
		return proto.proto.ssh.DisconnectResponse.toObject(
			opt_includeInstance,
			this,
		);
	};

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.proto.ssh.DisconnectResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.proto.ssh.DisconnectResponse.toObject = function (
		includeInstance,
		msg,
	) {
		var f,
			obj = {};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ssh.DisconnectResponse}
 */
proto.proto.ssh.DisconnectResponse.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.proto.ssh.DisconnectResponse();
	return proto.proto.ssh.DisconnectResponse.deserializeBinaryFromReader(
		msg,
		reader,
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ssh.DisconnectResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ssh.DisconnectResponse}
 */
proto.proto.ssh.DisconnectResponse.deserializeBinaryFromReader = function (
	msg,
	reader,
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ssh.DisconnectResponse.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.proto.ssh.DisconnectResponse.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ssh.DisconnectResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ssh.DisconnectResponse.serializeBinaryToWriter = function (
	message,
	writer,
) {
	var f = undefined;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.proto.ssh.CommandResponse.prototype.toObject = function (
		opt_includeInstance,
	) {
		return proto.proto.ssh.CommandResponse.toObject(
			opt_includeInstance,
			this,
		);
	};

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.proto.ssh.CommandResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.proto.ssh.CommandResponse.toObject = function (includeInstance, msg) {
		var f,
			obj = {
				message: jspb.Message.getFieldWithDefault(msg, 2, ''),
				exitstatus: jspb.Message.getFieldWithDefault(msg, 3, 0),
			};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ssh.CommandResponse}
 */
proto.proto.ssh.CommandResponse.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.proto.ssh.CommandResponse();
	return proto.proto.ssh.CommandResponse.deserializeBinaryFromReader(
		msg,
		reader,
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ssh.CommandResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ssh.CommandResponse}
 */
proto.proto.ssh.CommandResponse.deserializeBinaryFromReader = function (
	msg,
	reader,
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 2:
				var value = /** @type {string} */ (reader.readString());
				msg.setMessage(value);
				break;
			case 3:
				var value = /** @type {number} */ (reader.readInt32());
				msg.setExitstatus(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ssh.CommandResponse.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.proto.ssh.CommandResponse.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ssh.CommandResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ssh.CommandResponse.serializeBinaryToWriter = function (
	message,
	writer,
) {
	var f = undefined;
	f = message.getMessage();
	if (f.length > 0) {
		writer.writeString(2, f);
	}
	f = message.getExitstatus();
	if (f !== 0) {
		writer.writeInt32(3, f);
	}
};

/**
 * optional string message = 2;
 * @return {string}
 */
proto.proto.ssh.CommandResponse.prototype.getMessage = function () {
	return /** @type {string} */ (
		jspb.Message.getFieldWithDefault(this, 2, '')
	);
};

/**
 * @param {string} value
 * @return {!proto.proto.ssh.CommandResponse} returns this
 */
proto.proto.ssh.CommandResponse.prototype.setMessage = function (value) {
	return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional int32 exitStatus = 3;
 * @return {number}
 */
proto.proto.ssh.CommandResponse.prototype.getExitstatus = function () {
	return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/**
 * @param {number} value
 * @return {!proto.proto.ssh.CommandResponse} returns this
 */
proto.proto.ssh.CommandResponse.prototype.setExitstatus = function (value) {
	return jspb.Message.setProto3IntField(this, 3, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.proto.ssh.WindowChangeResponse.prototype.toObject = function (
		opt_includeInstance,
	) {
		return proto.proto.ssh.WindowChangeResponse.toObject(
			opt_includeInstance,
			this,
		);
	};

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.proto.ssh.WindowChangeResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.proto.ssh.WindowChangeResponse.toObject = function (
		includeInstance,
		msg,
	) {
		var f,
			obj = {};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ssh.WindowChangeResponse}
 */
proto.proto.ssh.WindowChangeResponse.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.proto.ssh.WindowChangeResponse();
	return proto.proto.ssh.WindowChangeResponse.deserializeBinaryFromReader(
		msg,
		reader,
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ssh.WindowChangeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ssh.WindowChangeResponse}
 */
proto.proto.ssh.WindowChangeResponse.deserializeBinaryFromReader = function (
	msg,
	reader,
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ssh.WindowChangeResponse.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.proto.ssh.WindowChangeResponse.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ssh.WindowChangeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ssh.WindowChangeResponse.serializeBinaryToWriter = function (
	message,
	writer,
) {
	var f = undefined;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.proto.ssh.ErrorResponse.prototype.toObject = function (
		opt_includeInstance,
	) {
		return proto.proto.ssh.ErrorResponse.toObject(
			opt_includeInstance,
			this,
		);
	};

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.proto.ssh.ErrorResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.proto.ssh.ErrorResponse.toObject = function (includeInstance, msg) {
		var f,
			obj = {
				prefix: jspb.Message.getFieldWithDefault(msg, 1, ''),
				serialnumber: jspb.Message.getFieldWithDefault(msg, 2, 0),
				message: jspb.Message.getFieldWithDefault(msg, 3, ''),
				format: jspb.Message.getFieldWithDefault(msg, 4, ''),
				attributeMap: (f = msg.getAttributeMap())
					? f.toObject(includeInstance, undefined)
					: [],
			};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ssh.ErrorResponse}
 */
proto.proto.ssh.ErrorResponse.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.proto.ssh.ErrorResponse();
	return proto.proto.ssh.ErrorResponse.deserializeBinaryFromReader(
		msg,
		reader,
	);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ssh.ErrorResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ssh.ErrorResponse}
 */
proto.proto.ssh.ErrorResponse.deserializeBinaryFromReader = function (
	msg,
	reader,
) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {string} */ (reader.readString());
				msg.setPrefix(value);
				break;
			case 2:
				var value = /** @type {number} */ (reader.readInt32());
				msg.setSerialnumber(value);
				break;
			case 3:
				var value = /** @type {string} */ (reader.readString());
				msg.setMessage(value);
				break;
			case 4:
				var value = /** @type {string} */ (reader.readString());
				msg.setFormat(value);
				break;
			case 5:
				var value = msg.getAttributeMap();
				reader.readMessage(value, function (message, reader) {
					jspb.Map.deserializeBinary(
						message,
						reader,
						jspb.BinaryReader.prototype.readString,
						jspb.BinaryReader.prototype.readString,
						null,
						'',
						'',
					);
				});
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ssh.ErrorResponse.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.proto.ssh.ErrorResponse.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ssh.ErrorResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ssh.ErrorResponse.serializeBinaryToWriter = function (
	message,
	writer,
) {
	var f = undefined;
	f = message.getPrefix();
	if (f.length > 0) {
		writer.writeString(1, f);
	}
	f = message.getSerialnumber();
	if (f !== 0) {
		writer.writeInt32(2, f);
	}
	f = message.getMessage();
	if (f.length > 0) {
		writer.writeString(3, f);
	}
	f = message.getFormat();
	if (f.length > 0) {
		writer.writeString(4, f);
	}
	f = message.getAttributeMap(true);
	if (f && f.getLength() > 0) {
		f.serializeBinary(
			5,
			writer,
			jspb.BinaryWriter.prototype.writeString,
			jspb.BinaryWriter.prototype.writeString,
		);
	}
};

/**
 * optional string prefix = 1;
 * @return {string}
 */
proto.proto.ssh.ErrorResponse.prototype.getPrefix = function () {
	return /** @type {string} */ (
		jspb.Message.getFieldWithDefault(this, 1, '')
	);
};

/**
 * @param {string} value
 * @return {!proto.proto.ssh.ErrorResponse} returns this
 */
proto.proto.ssh.ErrorResponse.prototype.setPrefix = function (value) {
	return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional int32 serialNumber = 2;
 * @return {number}
 */
proto.proto.ssh.ErrorResponse.prototype.getSerialnumber = function () {
	return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {number} value
 * @return {!proto.proto.ssh.ErrorResponse} returns this
 */
proto.proto.ssh.ErrorResponse.prototype.setSerialnumber = function (value) {
	return jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * optional string message = 3;
 * @return {string}
 */
proto.proto.ssh.ErrorResponse.prototype.getMessage = function () {
	return /** @type {string} */ (
		jspb.Message.getFieldWithDefault(this, 3, '')
	);
};

/**
 * @param {string} value
 * @return {!proto.proto.ssh.ErrorResponse} returns this
 */
proto.proto.ssh.ErrorResponse.prototype.setMessage = function (value) {
	return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional string format = 4;
 * @return {string}
 */
proto.proto.ssh.ErrorResponse.prototype.getFormat = function () {
	return /** @type {string} */ (
		jspb.Message.getFieldWithDefault(this, 4, '')
	);
};

/**
 * @param {string} value
 * @return {!proto.proto.ssh.ErrorResponse} returns this
 */
proto.proto.ssh.ErrorResponse.prototype.setFormat = function (value) {
	return jspb.Message.setProto3StringField(this, 4, value);
};

/**
 * map<string, string> attribute = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.proto.ssh.ErrorResponse.prototype.getAttributeMap = function (
	opt_noLazyCreate,
) {
	return /** @type {!jspb.Map<string,string>} */ (
		jspb.Message.getMapField(this, 5, opt_noLazyCreate, null)
	);
};

/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.proto.ssh.ErrorResponse} returns this
 */
proto.proto.ssh.ErrorResponse.prototype.clearAttributeMap = function () {
	this.getAttributeMap().clear();
	return this;
};

goog.object.extend(exports, proto.proto.ssh);
