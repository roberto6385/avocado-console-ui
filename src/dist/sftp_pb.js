// source: sftp.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.proto.sftp.CommandByCd', null, global);
goog.exportSymbol('proto.proto.sftp.CommandByChgrp', null, global);
goog.exportSymbol('proto.proto.sftp.CommandByChmod', null, global);
goog.exportSymbol('proto.proto.sftp.CommandByChown', null, global);
goog.exportSymbol('proto.proto.sftp.CommandByExit', null, global);
goog.exportSymbol('proto.proto.sftp.CommandByGet', null, global);
goog.exportSymbol('proto.proto.sftp.CommandByGetDirect', null, global);
goog.exportSymbol('proto.proto.sftp.CommandByLn', null, global);
goog.exportSymbol('proto.proto.sftp.CommandByLs', null, global);
goog.exportSymbol('proto.proto.sftp.CommandByLstat', null, global);
goog.exportSymbol('proto.proto.sftp.CommandByMkdir', null, global);
goog.exportSymbol('proto.proto.sftp.CommandByPut', null, global);
goog.exportSymbol('proto.proto.sftp.CommandByPutDirect', null, global);
goog.exportSymbol('proto.proto.sftp.CommandByPwd', null, global);
goog.exportSymbol('proto.proto.sftp.CommandByQuit', null, global);
goog.exportSymbol('proto.proto.sftp.CommandByRename', null, global);
goog.exportSymbol('proto.proto.sftp.CommandByRm', null, global);
goog.exportSymbol('proto.proto.sftp.CommandByRmdir', null, global);
goog.exportSymbol('proto.proto.sftp.CommandByStat', null, global);
goog.exportSymbol('proto.proto.sftp.ConnectRequest', null, global);
goog.exportSymbol('proto.proto.sftp.ConnectResponse', null, global);
goog.exportSymbol('proto.proto.sftp.DisconnectRequest', null, global);
goog.exportSymbol('proto.proto.sftp.DisconnectResponse', null, global);
goog.exportSymbol('proto.proto.sftp.FileResponse', null, global);
goog.exportSymbol('proto.proto.sftp.Message', null, global);
goog.exportSymbol('proto.proto.sftp.Message.Types', null, global);
goog.exportSymbol('proto.proto.sftp.MessageRequest', null, global);
goog.exportSymbol('proto.proto.sftp.MessageRequest.CommandsCase', null, global);
goog.exportSymbol('proto.proto.sftp.MessageResponse', null, global);
goog.exportSymbol('proto.proto.sftp.Request', null, global);
goog.exportSymbol('proto.proto.sftp.Request.Types', null, global);
goog.exportSymbol('proto.proto.sftp.Response', null, global);
goog.exportSymbol('proto.proto.sftp.Response.Status', null, global);
goog.exportSymbol('proto.proto.sftp.Response.Types', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.sftp.Message = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.sftp.Message, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.sftp.Message.displayName = 'proto.proto.sftp.Message';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.sftp.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.sftp.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.sftp.Request.displayName = 'proto.proto.sftp.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.sftp.ConnectRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.sftp.ConnectRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.sftp.ConnectRequest.displayName = 'proto.proto.sftp.ConnectRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.sftp.DisconnectRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.sftp.DisconnectRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.sftp.DisconnectRequest.displayName = 'proto.proto.sftp.DisconnectRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.sftp.MessageRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.proto.sftp.MessageRequest.oneofGroups_);
};
goog.inherits(proto.proto.sftp.MessageRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.sftp.MessageRequest.displayName = 'proto.proto.sftp.MessageRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.sftp.CommandByCd = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.sftp.CommandByCd, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.sftp.CommandByCd.displayName = 'proto.proto.sftp.CommandByCd';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.sftp.CommandByPwd = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.sftp.CommandByPwd, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.sftp.CommandByPwd.displayName = 'proto.proto.sftp.CommandByPwd';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.sftp.CommandByChgrp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.sftp.CommandByChgrp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.sftp.CommandByChgrp.displayName = 'proto.proto.sftp.CommandByChgrp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.sftp.CommandByChown = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.sftp.CommandByChown, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.sftp.CommandByChown.displayName = 'proto.proto.sftp.CommandByChown';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.sftp.CommandByChmod = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.sftp.CommandByChmod, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.sftp.CommandByChmod.displayName = 'proto.proto.sftp.CommandByChmod';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.sftp.CommandByMkdir = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.sftp.CommandByMkdir, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.sftp.CommandByMkdir.displayName = 'proto.proto.sftp.CommandByMkdir';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.sftp.CommandByRmdir = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.sftp.CommandByRmdir, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.sftp.CommandByRmdir.displayName = 'proto.proto.sftp.CommandByRmdir';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.sftp.CommandByRm = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.sftp.CommandByRm, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.sftp.CommandByRm.displayName = 'proto.proto.sftp.CommandByRm';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.sftp.CommandByRename = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.sftp.CommandByRename, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.sftp.CommandByRename.displayName = 'proto.proto.sftp.CommandByRename';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.sftp.CommandByLn = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.sftp.CommandByLn, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.sftp.CommandByLn.displayName = 'proto.proto.sftp.CommandByLn';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.sftp.CommandByLs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.sftp.CommandByLs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.sftp.CommandByLs.displayName = 'proto.proto.sftp.CommandByLs';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.sftp.CommandByStat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.sftp.CommandByStat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.sftp.CommandByStat.displayName = 'proto.proto.sftp.CommandByStat';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.sftp.CommandByLstat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.sftp.CommandByLstat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.sftp.CommandByLstat.displayName = 'proto.proto.sftp.CommandByLstat';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.sftp.CommandByPut = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.sftp.CommandByPut, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.sftp.CommandByPut.displayName = 'proto.proto.sftp.CommandByPut';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.sftp.CommandByPutDirect = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.sftp.CommandByPutDirect, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.sftp.CommandByPutDirect.displayName = 'proto.proto.sftp.CommandByPutDirect';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.sftp.CommandByGet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.sftp.CommandByGet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.sftp.CommandByGet.displayName = 'proto.proto.sftp.CommandByGet';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.sftp.CommandByGetDirect = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.sftp.CommandByGetDirect, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.sftp.CommandByGetDirect.displayName = 'proto.proto.sftp.CommandByGetDirect';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.sftp.CommandByExit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.sftp.CommandByExit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.sftp.CommandByExit.displayName = 'proto.proto.sftp.CommandByExit';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.sftp.CommandByQuit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.sftp.CommandByQuit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.sftp.CommandByQuit.displayName = 'proto.proto.sftp.CommandByQuit';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.sftp.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.sftp.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.sftp.Response.displayName = 'proto.proto.sftp.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.sftp.ConnectResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.sftp.ConnectResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.sftp.ConnectResponse.displayName = 'proto.proto.sftp.ConnectResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.sftp.DisconnectResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.sftp.DisconnectResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.sftp.DisconnectResponse.displayName = 'proto.proto.sftp.DisconnectResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.sftp.MessageResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.sftp.MessageResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.sftp.MessageResponse.displayName = 'proto.proto.sftp.MessageResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.sftp.FileResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.sftp.FileResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.sftp.FileResponse.displayName = 'proto.proto.sftp.FileResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.sftp.Message.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.sftp.Message.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.sftp.Message} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.sftp.Message.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    body: msg.getBody_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.sftp.Message}
 */
proto.proto.sftp.Message.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.sftp.Message;
  return proto.proto.sftp.Message.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.sftp.Message} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.sftp.Message}
 */
proto.proto.sftp.Message.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.proto.sftp.Message.Types} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBody(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.sftp.Message.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.sftp.Message.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.sftp.Message} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.sftp.Message.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getBody_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.proto.sftp.Message.Types = {
  UNKNOWN: 0,
  REQUEST: 1,
  RESPONSE: 2
};

/**
 * optional Types type = 1;
 * @return {!proto.proto.sftp.Message.Types}
 */
proto.proto.sftp.Message.prototype.getType = function() {
  return /** @type {!proto.proto.sftp.Message.Types} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.proto.sftp.Message.Types} value
 * @return {!proto.proto.sftp.Message} returns this
 */
proto.proto.sftp.Message.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bytes body = 2;
 * @return {!(string|Uint8Array)}
 */
proto.proto.sftp.Message.prototype.getBody = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes body = 2;
 * This is a type-conversion wrapper around `getBody()`
 * @return {string}
 */
proto.proto.sftp.Message.prototype.getBody_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBody()));
};


/**
 * optional bytes body = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBody()`
 * @return {!Uint8Array}
 */
proto.proto.sftp.Message.prototype.getBody_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBody()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.proto.sftp.Message} returns this
 */
proto.proto.sftp.Message.prototype.setBody = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.sftp.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.sftp.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.sftp.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.sftp.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    body: msg.getBody_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.sftp.Request}
 */
proto.proto.sftp.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.sftp.Request;
  return proto.proto.sftp.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.sftp.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.sftp.Request}
 */
proto.proto.sftp.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.proto.sftp.Request.Types} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBody(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.sftp.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.sftp.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.sftp.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.sftp.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getBody_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.proto.sftp.Request.Types = {
  UNKNOWN: 0,
  CONNECT: 1,
  DISCONNECT: 2,
  MESSAGE: 3
};

/**
 * optional Types type = 1;
 * @return {!proto.proto.sftp.Request.Types}
 */
proto.proto.sftp.Request.prototype.getType = function() {
  return /** @type {!proto.proto.sftp.Request.Types} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.proto.sftp.Request.Types} value
 * @return {!proto.proto.sftp.Request} returns this
 */
proto.proto.sftp.Request.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bytes body = 2;
 * @return {!(string|Uint8Array)}
 */
proto.proto.sftp.Request.prototype.getBody = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes body = 2;
 * This is a type-conversion wrapper around `getBody()`
 * @return {string}
 */
proto.proto.sftp.Request.prototype.getBody_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBody()));
};


/**
 * optional bytes body = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBody()`
 * @return {!Uint8Array}
 */
proto.proto.sftp.Request.prototype.getBody_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBody()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.proto.sftp.Request} returns this
 */
proto.proto.sftp.Request.prototype.setBody = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.sftp.ConnectRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.sftp.ConnectRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.sftp.ConnectRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.sftp.ConnectRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    host: jspb.Message.getFieldWithDefault(msg, 1, ""),
    user: jspb.Message.getFieldWithDefault(msg, 2, ""),
    password: jspb.Message.getFieldWithDefault(msg, 3, ""),
    port: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.sftp.ConnectRequest}
 */
proto.proto.sftp.ConnectRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.sftp.ConnectRequest;
  return proto.proto.sftp.ConnectRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.sftp.ConnectRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.sftp.ConnectRequest}
 */
proto.proto.sftp.ConnectRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHost(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUser(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPort(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.sftp.ConnectRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.sftp.ConnectRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.sftp.ConnectRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.sftp.ConnectRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHost();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUser();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional string host = 1;
 * @return {string}
 */
proto.proto.sftp.ConnectRequest.prototype.getHost = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.sftp.ConnectRequest} returns this
 */
proto.proto.sftp.ConnectRequest.prototype.setHost = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string user = 2;
 * @return {string}
 */
proto.proto.sftp.ConnectRequest.prototype.getUser = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.sftp.ConnectRequest} returns this
 */
proto.proto.sftp.ConnectRequest.prototype.setUser = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string password = 3;
 * @return {string}
 */
proto.proto.sftp.ConnectRequest.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.sftp.ConnectRequest} returns this
 */
proto.proto.sftp.ConnectRequest.prototype.setPassword = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 port = 4;
 * @return {number}
 */
proto.proto.sftp.ConnectRequest.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.sftp.ConnectRequest} returns this
 */
proto.proto.sftp.ConnectRequest.prototype.setPort = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.sftp.DisconnectRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.sftp.DisconnectRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.sftp.DisconnectRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.sftp.DisconnectRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.sftp.DisconnectRequest}
 */
proto.proto.sftp.DisconnectRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.sftp.DisconnectRequest;
  return proto.proto.sftp.DisconnectRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.sftp.DisconnectRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.sftp.DisconnectRequest}
 */
proto.proto.sftp.DisconnectRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.sftp.DisconnectRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.sftp.DisconnectRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.sftp.DisconnectRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.sftp.DisconnectRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.proto.sftp.DisconnectRequest.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.sftp.DisconnectRequest} returns this
 */
proto.proto.sftp.DisconnectRequest.prototype.setUuid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.proto.sftp.MessageRequest.oneofGroups_ = [[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]];

/**
 * @enum {number}
 */
proto.proto.sftp.MessageRequest.CommandsCase = {
  COMMANDS_NOT_SET: 0,
  CD: 2,
  PWD: 3,
  CHGRP: 4,
  CHOWN: 5,
  CHMOD: 6,
  MKDIR: 7,
  RMDIR: 8,
  RM: 9,
  RENAME: 10,
  LN: 11,
  LS: 12,
  STAT: 13,
  LSTAT: 14,
  PUT: 15,
  PUTDIRECT: 16,
  GET: 17,
  GETDIRECT: 18,
  EXIT: 19,
  QUIT: 20
};

/**
 * @return {proto.proto.sftp.MessageRequest.CommandsCase}
 */
proto.proto.sftp.MessageRequest.prototype.getCommandsCase = function() {
  return /** @type {proto.proto.sftp.MessageRequest.CommandsCase} */(jspb.Message.computeOneofCase(this, proto.proto.sftp.MessageRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.sftp.MessageRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.sftp.MessageRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.sftp.MessageRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.sftp.MessageRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    cd: (f = msg.getCd()) && proto.proto.sftp.CommandByCd.toObject(includeInstance, f),
    pwd: (f = msg.getPwd()) && proto.proto.sftp.CommandByPwd.toObject(includeInstance, f),
    chgrp: (f = msg.getChgrp()) && proto.proto.sftp.CommandByChgrp.toObject(includeInstance, f),
    chown: (f = msg.getChown()) && proto.proto.sftp.CommandByChown.toObject(includeInstance, f),
    chmod: (f = msg.getChmod()) && proto.proto.sftp.CommandByChmod.toObject(includeInstance, f),
    mkdir: (f = msg.getMkdir()) && proto.proto.sftp.CommandByMkdir.toObject(includeInstance, f),
    rmdir: (f = msg.getRmdir()) && proto.proto.sftp.CommandByRmdir.toObject(includeInstance, f),
    rm: (f = msg.getRm()) && proto.proto.sftp.CommandByRm.toObject(includeInstance, f),
    rename: (f = msg.getRename()) && proto.proto.sftp.CommandByRename.toObject(includeInstance, f),
    ln: (f = msg.getLn()) && proto.proto.sftp.CommandByLn.toObject(includeInstance, f),
    ls: (f = msg.getLs()) && proto.proto.sftp.CommandByLs.toObject(includeInstance, f),
    stat: (f = msg.getStat()) && proto.proto.sftp.CommandByStat.toObject(includeInstance, f),
    lstat: (f = msg.getLstat()) && proto.proto.sftp.CommandByLstat.toObject(includeInstance, f),
    put: (f = msg.getPut()) && proto.proto.sftp.CommandByPut.toObject(includeInstance, f),
    putdirect: (f = msg.getPutdirect()) && proto.proto.sftp.CommandByPutDirect.toObject(includeInstance, f),
    get: (f = msg.getGet()) && proto.proto.sftp.CommandByGet.toObject(includeInstance, f),
    getdirect: (f = msg.getGetdirect()) && proto.proto.sftp.CommandByGetDirect.toObject(includeInstance, f),
    exit: (f = msg.getExit()) && proto.proto.sftp.CommandByExit.toObject(includeInstance, f),
    quit: (f = msg.getQuit()) && proto.proto.sftp.CommandByQuit.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.sftp.MessageRequest}
 */
proto.proto.sftp.MessageRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.sftp.MessageRequest;
  return proto.proto.sftp.MessageRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.sftp.MessageRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.sftp.MessageRequest}
 */
proto.proto.sftp.MessageRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 2:
      var value = new proto.proto.sftp.CommandByCd;
      reader.readMessage(value,proto.proto.sftp.CommandByCd.deserializeBinaryFromReader);
      msg.setCd(value);
      break;
    case 3:
      var value = new proto.proto.sftp.CommandByPwd;
      reader.readMessage(value,proto.proto.sftp.CommandByPwd.deserializeBinaryFromReader);
      msg.setPwd(value);
      break;
    case 4:
      var value = new proto.proto.sftp.CommandByChgrp;
      reader.readMessage(value,proto.proto.sftp.CommandByChgrp.deserializeBinaryFromReader);
      msg.setChgrp(value);
      break;
    case 5:
      var value = new proto.proto.sftp.CommandByChown;
      reader.readMessage(value,proto.proto.sftp.CommandByChown.deserializeBinaryFromReader);
      msg.setChown(value);
      break;
    case 6:
      var value = new proto.proto.sftp.CommandByChmod;
      reader.readMessage(value,proto.proto.sftp.CommandByChmod.deserializeBinaryFromReader);
      msg.setChmod(value);
      break;
    case 7:
      var value = new proto.proto.sftp.CommandByMkdir;
      reader.readMessage(value,proto.proto.sftp.CommandByMkdir.deserializeBinaryFromReader);
      msg.setMkdir(value);
      break;
    case 8:
      var value = new proto.proto.sftp.CommandByRmdir;
      reader.readMessage(value,proto.proto.sftp.CommandByRmdir.deserializeBinaryFromReader);
      msg.setRmdir(value);
      break;
    case 9:
      var value = new proto.proto.sftp.CommandByRm;
      reader.readMessage(value,proto.proto.sftp.CommandByRm.deserializeBinaryFromReader);
      msg.setRm(value);
      break;
    case 10:
      var value = new proto.proto.sftp.CommandByRename;
      reader.readMessage(value,proto.proto.sftp.CommandByRename.deserializeBinaryFromReader);
      msg.setRename(value);
      break;
    case 11:
      var value = new proto.proto.sftp.CommandByLn;
      reader.readMessage(value,proto.proto.sftp.CommandByLn.deserializeBinaryFromReader);
      msg.setLn(value);
      break;
    case 12:
      var value = new proto.proto.sftp.CommandByLs;
      reader.readMessage(value,proto.proto.sftp.CommandByLs.deserializeBinaryFromReader);
      msg.setLs(value);
      break;
    case 13:
      var value = new proto.proto.sftp.CommandByStat;
      reader.readMessage(value,proto.proto.sftp.CommandByStat.deserializeBinaryFromReader);
      msg.setStat(value);
      break;
    case 14:
      var value = new proto.proto.sftp.CommandByLstat;
      reader.readMessage(value,proto.proto.sftp.CommandByLstat.deserializeBinaryFromReader);
      msg.setLstat(value);
      break;
    case 15:
      var value = new proto.proto.sftp.CommandByPut;
      reader.readMessage(value,proto.proto.sftp.CommandByPut.deserializeBinaryFromReader);
      msg.setPut(value);
      break;
    case 16:
      var value = new proto.proto.sftp.CommandByPutDirect;
      reader.readMessage(value,proto.proto.sftp.CommandByPutDirect.deserializeBinaryFromReader);
      msg.setPutdirect(value);
      break;
    case 17:
      var value = new proto.proto.sftp.CommandByGet;
      reader.readMessage(value,proto.proto.sftp.CommandByGet.deserializeBinaryFromReader);
      msg.setGet(value);
      break;
    case 18:
      var value = new proto.proto.sftp.CommandByGetDirect;
      reader.readMessage(value,proto.proto.sftp.CommandByGetDirect.deserializeBinaryFromReader);
      msg.setGetdirect(value);
      break;
    case 19:
      var value = new proto.proto.sftp.CommandByExit;
      reader.readMessage(value,proto.proto.sftp.CommandByExit.deserializeBinaryFromReader);
      msg.setExit(value);
      break;
    case 20:
      var value = new proto.proto.sftp.CommandByQuit;
      reader.readMessage(value,proto.proto.sftp.CommandByQuit.deserializeBinaryFromReader);
      msg.setQuit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.sftp.MessageRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.sftp.MessageRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.sftp.MessageRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.sftp.MessageRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCd();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.proto.sftp.CommandByCd.serializeBinaryToWriter
    );
  }
  f = message.getPwd();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.proto.sftp.CommandByPwd.serializeBinaryToWriter
    );
  }
  f = message.getChgrp();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.proto.sftp.CommandByChgrp.serializeBinaryToWriter
    );
  }
  f = message.getChown();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.proto.sftp.CommandByChown.serializeBinaryToWriter
    );
  }
  f = message.getChmod();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.proto.sftp.CommandByChmod.serializeBinaryToWriter
    );
  }
  f = message.getMkdir();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.proto.sftp.CommandByMkdir.serializeBinaryToWriter
    );
  }
  f = message.getRmdir();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.proto.sftp.CommandByRmdir.serializeBinaryToWriter
    );
  }
  f = message.getRm();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.proto.sftp.CommandByRm.serializeBinaryToWriter
    );
  }
  f = message.getRename();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.proto.sftp.CommandByRename.serializeBinaryToWriter
    );
  }
  f = message.getLn();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.proto.sftp.CommandByLn.serializeBinaryToWriter
    );
  }
  f = message.getLs();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.proto.sftp.CommandByLs.serializeBinaryToWriter
    );
  }
  f = message.getStat();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.proto.sftp.CommandByStat.serializeBinaryToWriter
    );
  }
  f = message.getLstat();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.proto.sftp.CommandByLstat.serializeBinaryToWriter
    );
  }
  f = message.getPut();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.proto.sftp.CommandByPut.serializeBinaryToWriter
    );
  }
  f = message.getPutdirect();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.proto.sftp.CommandByPutDirect.serializeBinaryToWriter
    );
  }
  f = message.getGet();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.proto.sftp.CommandByGet.serializeBinaryToWriter
    );
  }
  f = message.getGetdirect();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      proto.proto.sftp.CommandByGetDirect.serializeBinaryToWriter
    );
  }
  f = message.getExit();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      proto.proto.sftp.CommandByExit.serializeBinaryToWriter
    );
  }
  f = message.getQuit();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      proto.proto.sftp.CommandByQuit.serializeBinaryToWriter
    );
  }
};


/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.proto.sftp.MessageRequest.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.sftp.MessageRequest} returns this
 */
proto.proto.sftp.MessageRequest.prototype.setUuid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional CommandByCd cd = 2;
 * @return {?proto.proto.sftp.CommandByCd}
 */
proto.proto.sftp.MessageRequest.prototype.getCd = function() {
  return /** @type{?proto.proto.sftp.CommandByCd} */ (
    jspb.Message.getWrapperField(this, proto.proto.sftp.CommandByCd, 2));
};


/**
 * @param {?proto.proto.sftp.CommandByCd|undefined} value
 * @return {!proto.proto.sftp.MessageRequest} returns this
*/
proto.proto.sftp.MessageRequest.prototype.setCd = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.proto.sftp.MessageRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.sftp.MessageRequest} returns this
 */
proto.proto.sftp.MessageRequest.prototype.clearCd = function() {
  return this.setCd(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.sftp.MessageRequest.prototype.hasCd = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional CommandByPwd pwd = 3;
 * @return {?proto.proto.sftp.CommandByPwd}
 */
proto.proto.sftp.MessageRequest.prototype.getPwd = function() {
  return /** @type{?proto.proto.sftp.CommandByPwd} */ (
    jspb.Message.getWrapperField(this, proto.proto.sftp.CommandByPwd, 3));
};


/**
 * @param {?proto.proto.sftp.CommandByPwd|undefined} value
 * @return {!proto.proto.sftp.MessageRequest} returns this
*/
proto.proto.sftp.MessageRequest.prototype.setPwd = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.proto.sftp.MessageRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.sftp.MessageRequest} returns this
 */
proto.proto.sftp.MessageRequest.prototype.clearPwd = function() {
  return this.setPwd(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.sftp.MessageRequest.prototype.hasPwd = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional CommandByChgrp chgrp = 4;
 * @return {?proto.proto.sftp.CommandByChgrp}
 */
proto.proto.sftp.MessageRequest.prototype.getChgrp = function() {
  return /** @type{?proto.proto.sftp.CommandByChgrp} */ (
    jspb.Message.getWrapperField(this, proto.proto.sftp.CommandByChgrp, 4));
};


/**
 * @param {?proto.proto.sftp.CommandByChgrp|undefined} value
 * @return {!proto.proto.sftp.MessageRequest} returns this
*/
proto.proto.sftp.MessageRequest.prototype.setChgrp = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.proto.sftp.MessageRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.sftp.MessageRequest} returns this
 */
proto.proto.sftp.MessageRequest.prototype.clearChgrp = function() {
  return this.setChgrp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.sftp.MessageRequest.prototype.hasChgrp = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional CommandByChown chown = 5;
 * @return {?proto.proto.sftp.CommandByChown}
 */
proto.proto.sftp.MessageRequest.prototype.getChown = function() {
  return /** @type{?proto.proto.sftp.CommandByChown} */ (
    jspb.Message.getWrapperField(this, proto.proto.sftp.CommandByChown, 5));
};


/**
 * @param {?proto.proto.sftp.CommandByChown|undefined} value
 * @return {!proto.proto.sftp.MessageRequest} returns this
*/
proto.proto.sftp.MessageRequest.prototype.setChown = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.proto.sftp.MessageRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.sftp.MessageRequest} returns this
 */
proto.proto.sftp.MessageRequest.prototype.clearChown = function() {
  return this.setChown(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.sftp.MessageRequest.prototype.hasChown = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional CommandByChmod chmod = 6;
 * @return {?proto.proto.sftp.CommandByChmod}
 */
proto.proto.sftp.MessageRequest.prototype.getChmod = function() {
  return /** @type{?proto.proto.sftp.CommandByChmod} */ (
    jspb.Message.getWrapperField(this, proto.proto.sftp.CommandByChmod, 6));
};


/**
 * @param {?proto.proto.sftp.CommandByChmod|undefined} value
 * @return {!proto.proto.sftp.MessageRequest} returns this
*/
proto.proto.sftp.MessageRequest.prototype.setChmod = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.proto.sftp.MessageRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.sftp.MessageRequest} returns this
 */
proto.proto.sftp.MessageRequest.prototype.clearChmod = function() {
  return this.setChmod(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.sftp.MessageRequest.prototype.hasChmod = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional CommandByMkdir mkdir = 7;
 * @return {?proto.proto.sftp.CommandByMkdir}
 */
proto.proto.sftp.MessageRequest.prototype.getMkdir = function() {
  return /** @type{?proto.proto.sftp.CommandByMkdir} */ (
    jspb.Message.getWrapperField(this, proto.proto.sftp.CommandByMkdir, 7));
};


/**
 * @param {?proto.proto.sftp.CommandByMkdir|undefined} value
 * @return {!proto.proto.sftp.MessageRequest} returns this
*/
proto.proto.sftp.MessageRequest.prototype.setMkdir = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.proto.sftp.MessageRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.sftp.MessageRequest} returns this
 */
proto.proto.sftp.MessageRequest.prototype.clearMkdir = function() {
  return this.setMkdir(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.sftp.MessageRequest.prototype.hasMkdir = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional CommandByRmdir rmdir = 8;
 * @return {?proto.proto.sftp.CommandByRmdir}
 */
proto.proto.sftp.MessageRequest.prototype.getRmdir = function() {
  return /** @type{?proto.proto.sftp.CommandByRmdir} */ (
    jspb.Message.getWrapperField(this, proto.proto.sftp.CommandByRmdir, 8));
};


/**
 * @param {?proto.proto.sftp.CommandByRmdir|undefined} value
 * @return {!proto.proto.sftp.MessageRequest} returns this
*/
proto.proto.sftp.MessageRequest.prototype.setRmdir = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.proto.sftp.MessageRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.sftp.MessageRequest} returns this
 */
proto.proto.sftp.MessageRequest.prototype.clearRmdir = function() {
  return this.setRmdir(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.sftp.MessageRequest.prototype.hasRmdir = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional CommandByRm rm = 9;
 * @return {?proto.proto.sftp.CommandByRm}
 */
proto.proto.sftp.MessageRequest.prototype.getRm = function() {
  return /** @type{?proto.proto.sftp.CommandByRm} */ (
    jspb.Message.getWrapperField(this, proto.proto.sftp.CommandByRm, 9));
};


/**
 * @param {?proto.proto.sftp.CommandByRm|undefined} value
 * @return {!proto.proto.sftp.MessageRequest} returns this
*/
proto.proto.sftp.MessageRequest.prototype.setRm = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.proto.sftp.MessageRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.sftp.MessageRequest} returns this
 */
proto.proto.sftp.MessageRequest.prototype.clearRm = function() {
  return this.setRm(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.sftp.MessageRequest.prototype.hasRm = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional CommandByRename rename = 10;
 * @return {?proto.proto.sftp.CommandByRename}
 */
proto.proto.sftp.MessageRequest.prototype.getRename = function() {
  return /** @type{?proto.proto.sftp.CommandByRename} */ (
    jspb.Message.getWrapperField(this, proto.proto.sftp.CommandByRename, 10));
};


/**
 * @param {?proto.proto.sftp.CommandByRename|undefined} value
 * @return {!proto.proto.sftp.MessageRequest} returns this
*/
proto.proto.sftp.MessageRequest.prototype.setRename = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.proto.sftp.MessageRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.sftp.MessageRequest} returns this
 */
proto.proto.sftp.MessageRequest.prototype.clearRename = function() {
  return this.setRename(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.sftp.MessageRequest.prototype.hasRename = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional CommandByLn ln = 11;
 * @return {?proto.proto.sftp.CommandByLn}
 */
proto.proto.sftp.MessageRequest.prototype.getLn = function() {
  return /** @type{?proto.proto.sftp.CommandByLn} */ (
    jspb.Message.getWrapperField(this, proto.proto.sftp.CommandByLn, 11));
};


/**
 * @param {?proto.proto.sftp.CommandByLn|undefined} value
 * @return {!proto.proto.sftp.MessageRequest} returns this
*/
proto.proto.sftp.MessageRequest.prototype.setLn = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.proto.sftp.MessageRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.sftp.MessageRequest} returns this
 */
proto.proto.sftp.MessageRequest.prototype.clearLn = function() {
  return this.setLn(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.sftp.MessageRequest.prototype.hasLn = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional CommandByLs ls = 12;
 * @return {?proto.proto.sftp.CommandByLs}
 */
proto.proto.sftp.MessageRequest.prototype.getLs = function() {
  return /** @type{?proto.proto.sftp.CommandByLs} */ (
    jspb.Message.getWrapperField(this, proto.proto.sftp.CommandByLs, 12));
};


/**
 * @param {?proto.proto.sftp.CommandByLs|undefined} value
 * @return {!proto.proto.sftp.MessageRequest} returns this
*/
proto.proto.sftp.MessageRequest.prototype.setLs = function(value) {
  return jspb.Message.setOneofWrapperField(this, 12, proto.proto.sftp.MessageRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.sftp.MessageRequest} returns this
 */
proto.proto.sftp.MessageRequest.prototype.clearLs = function() {
  return this.setLs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.sftp.MessageRequest.prototype.hasLs = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional CommandByStat stat = 13;
 * @return {?proto.proto.sftp.CommandByStat}
 */
proto.proto.sftp.MessageRequest.prototype.getStat = function() {
  return /** @type{?proto.proto.sftp.CommandByStat} */ (
    jspb.Message.getWrapperField(this, proto.proto.sftp.CommandByStat, 13));
};


/**
 * @param {?proto.proto.sftp.CommandByStat|undefined} value
 * @return {!proto.proto.sftp.MessageRequest} returns this
*/
proto.proto.sftp.MessageRequest.prototype.setStat = function(value) {
  return jspb.Message.setOneofWrapperField(this, 13, proto.proto.sftp.MessageRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.sftp.MessageRequest} returns this
 */
proto.proto.sftp.MessageRequest.prototype.clearStat = function() {
  return this.setStat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.sftp.MessageRequest.prototype.hasStat = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional CommandByLstat lstat = 14;
 * @return {?proto.proto.sftp.CommandByLstat}
 */
proto.proto.sftp.MessageRequest.prototype.getLstat = function() {
  return /** @type{?proto.proto.sftp.CommandByLstat} */ (
    jspb.Message.getWrapperField(this, proto.proto.sftp.CommandByLstat, 14));
};


/**
 * @param {?proto.proto.sftp.CommandByLstat|undefined} value
 * @return {!proto.proto.sftp.MessageRequest} returns this
*/
proto.proto.sftp.MessageRequest.prototype.setLstat = function(value) {
  return jspb.Message.setOneofWrapperField(this, 14, proto.proto.sftp.MessageRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.sftp.MessageRequest} returns this
 */
proto.proto.sftp.MessageRequest.prototype.clearLstat = function() {
  return this.setLstat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.sftp.MessageRequest.prototype.hasLstat = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional CommandByPut put = 15;
 * @return {?proto.proto.sftp.CommandByPut}
 */
proto.proto.sftp.MessageRequest.prototype.getPut = function() {
  return /** @type{?proto.proto.sftp.CommandByPut} */ (
    jspb.Message.getWrapperField(this, proto.proto.sftp.CommandByPut, 15));
};


/**
 * @param {?proto.proto.sftp.CommandByPut|undefined} value
 * @return {!proto.proto.sftp.MessageRequest} returns this
*/
proto.proto.sftp.MessageRequest.prototype.setPut = function(value) {
  return jspb.Message.setOneofWrapperField(this, 15, proto.proto.sftp.MessageRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.sftp.MessageRequest} returns this
 */
proto.proto.sftp.MessageRequest.prototype.clearPut = function() {
  return this.setPut(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.sftp.MessageRequest.prototype.hasPut = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional CommandByPutDirect putDirect = 16;
 * @return {?proto.proto.sftp.CommandByPutDirect}
 */
proto.proto.sftp.MessageRequest.prototype.getPutdirect = function() {
  return /** @type{?proto.proto.sftp.CommandByPutDirect} */ (
    jspb.Message.getWrapperField(this, proto.proto.sftp.CommandByPutDirect, 16));
};


/**
 * @param {?proto.proto.sftp.CommandByPutDirect|undefined} value
 * @return {!proto.proto.sftp.MessageRequest} returns this
*/
proto.proto.sftp.MessageRequest.prototype.setPutdirect = function(value) {
  return jspb.Message.setOneofWrapperField(this, 16, proto.proto.sftp.MessageRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.sftp.MessageRequest} returns this
 */
proto.proto.sftp.MessageRequest.prototype.clearPutdirect = function() {
  return this.setPutdirect(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.sftp.MessageRequest.prototype.hasPutdirect = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional CommandByGet get = 17;
 * @return {?proto.proto.sftp.CommandByGet}
 */
proto.proto.sftp.MessageRequest.prototype.getGet = function() {
  return /** @type{?proto.proto.sftp.CommandByGet} */ (
    jspb.Message.getWrapperField(this, proto.proto.sftp.CommandByGet, 17));
};


/**
 * @param {?proto.proto.sftp.CommandByGet|undefined} value
 * @return {!proto.proto.sftp.MessageRequest} returns this
*/
proto.proto.sftp.MessageRequest.prototype.setGet = function(value) {
  return jspb.Message.setOneofWrapperField(this, 17, proto.proto.sftp.MessageRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.sftp.MessageRequest} returns this
 */
proto.proto.sftp.MessageRequest.prototype.clearGet = function() {
  return this.setGet(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.sftp.MessageRequest.prototype.hasGet = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional CommandByGetDirect getDirect = 18;
 * @return {?proto.proto.sftp.CommandByGetDirect}
 */
proto.proto.sftp.MessageRequest.prototype.getGetdirect = function() {
  return /** @type{?proto.proto.sftp.CommandByGetDirect} */ (
    jspb.Message.getWrapperField(this, proto.proto.sftp.CommandByGetDirect, 18));
};


/**
 * @param {?proto.proto.sftp.CommandByGetDirect|undefined} value
 * @return {!proto.proto.sftp.MessageRequest} returns this
*/
proto.proto.sftp.MessageRequest.prototype.setGetdirect = function(value) {
  return jspb.Message.setOneofWrapperField(this, 18, proto.proto.sftp.MessageRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.sftp.MessageRequest} returns this
 */
proto.proto.sftp.MessageRequest.prototype.clearGetdirect = function() {
  return this.setGetdirect(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.sftp.MessageRequest.prototype.hasGetdirect = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional CommandByExit exit = 19;
 * @return {?proto.proto.sftp.CommandByExit}
 */
proto.proto.sftp.MessageRequest.prototype.getExit = function() {
  return /** @type{?proto.proto.sftp.CommandByExit} */ (
    jspb.Message.getWrapperField(this, proto.proto.sftp.CommandByExit, 19));
};


/**
 * @param {?proto.proto.sftp.CommandByExit|undefined} value
 * @return {!proto.proto.sftp.MessageRequest} returns this
*/
proto.proto.sftp.MessageRequest.prototype.setExit = function(value) {
  return jspb.Message.setOneofWrapperField(this, 19, proto.proto.sftp.MessageRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.sftp.MessageRequest} returns this
 */
proto.proto.sftp.MessageRequest.prototype.clearExit = function() {
  return this.setExit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.sftp.MessageRequest.prototype.hasExit = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional CommandByQuit quit = 20;
 * @return {?proto.proto.sftp.CommandByQuit}
 */
proto.proto.sftp.MessageRequest.prototype.getQuit = function() {
  return /** @type{?proto.proto.sftp.CommandByQuit} */ (
    jspb.Message.getWrapperField(this, proto.proto.sftp.CommandByQuit, 20));
};


/**
 * @param {?proto.proto.sftp.CommandByQuit|undefined} value
 * @return {!proto.proto.sftp.MessageRequest} returns this
*/
proto.proto.sftp.MessageRequest.prototype.setQuit = function(value) {
  return jspb.Message.setOneofWrapperField(this, 20, proto.proto.sftp.MessageRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.sftp.MessageRequest} returns this
 */
proto.proto.sftp.MessageRequest.prototype.clearQuit = function() {
  return this.setQuit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.sftp.MessageRequest.prototype.hasQuit = function() {
  return jspb.Message.getField(this, 20) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.sftp.CommandByCd.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.sftp.CommandByCd.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.sftp.CommandByCd} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.sftp.CommandByCd.toObject = function(includeInstance, msg) {
  var f, obj = {
    path: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.sftp.CommandByCd}
 */
proto.proto.sftp.CommandByCd.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.sftp.CommandByCd;
  return proto.proto.sftp.CommandByCd.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.sftp.CommandByCd} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.sftp.CommandByCd}
 */
proto.proto.sftp.CommandByCd.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.sftp.CommandByCd.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.sftp.CommandByCd.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.sftp.CommandByCd} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.sftp.CommandByCd.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string path = 1;
 * @return {string}
 */
proto.proto.sftp.CommandByCd.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.sftp.CommandByCd} returns this
 */
proto.proto.sftp.CommandByCd.prototype.setPath = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.sftp.CommandByPwd.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.sftp.CommandByPwd.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.sftp.CommandByPwd} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.sftp.CommandByPwd.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.sftp.CommandByPwd}
 */
proto.proto.sftp.CommandByPwd.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.sftp.CommandByPwd;
  return proto.proto.sftp.CommandByPwd.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.sftp.CommandByPwd} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.sftp.CommandByPwd}
 */
proto.proto.sftp.CommandByPwd.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.sftp.CommandByPwd.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.sftp.CommandByPwd.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.sftp.CommandByPwd} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.sftp.CommandByPwd.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.sftp.CommandByChgrp.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.sftp.CommandByChgrp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.sftp.CommandByChgrp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.sftp.CommandByChgrp.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    path: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.sftp.CommandByChgrp}
 */
proto.proto.sftp.CommandByChgrp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.sftp.CommandByChgrp;
  return proto.proto.sftp.CommandByChgrp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.sftp.CommandByChgrp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.sftp.CommandByChgrp}
 */
proto.proto.sftp.CommandByChgrp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGroupid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.sftp.CommandByChgrp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.sftp.CommandByChgrp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.sftp.CommandByChgrp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.sftp.CommandByChgrp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroupid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 groupId = 1;
 * @return {number}
 */
proto.proto.sftp.CommandByChgrp.prototype.getGroupid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.sftp.CommandByChgrp} returns this
 */
proto.proto.sftp.CommandByChgrp.prototype.setGroupid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string path = 2;
 * @return {string}
 */
proto.proto.sftp.CommandByChgrp.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.sftp.CommandByChgrp} returns this
 */
proto.proto.sftp.CommandByChgrp.prototype.setPath = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.sftp.CommandByChown.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.sftp.CommandByChown.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.sftp.CommandByChown} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.sftp.CommandByChown.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    path: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.sftp.CommandByChown}
 */
proto.proto.sftp.CommandByChown.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.sftp.CommandByChown;
  return proto.proto.sftp.CommandByChown.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.sftp.CommandByChown} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.sftp.CommandByChown}
 */
proto.proto.sftp.CommandByChown.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.sftp.CommandByChown.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.sftp.CommandByChown.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.sftp.CommandByChown} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.sftp.CommandByChown.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 userId = 1;
 * @return {number}
 */
proto.proto.sftp.CommandByChown.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.sftp.CommandByChown} returns this
 */
proto.proto.sftp.CommandByChown.prototype.setUserid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string path = 2;
 * @return {string}
 */
proto.proto.sftp.CommandByChown.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.sftp.CommandByChown} returns this
 */
proto.proto.sftp.CommandByChown.prototype.setPath = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.sftp.CommandByChmod.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.sftp.CommandByChmod.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.sftp.CommandByChmod} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.sftp.CommandByChmod.toObject = function(includeInstance, msg) {
  var f, obj = {
    permissions: jspb.Message.getFieldWithDefault(msg, 1, 0),
    path: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.sftp.CommandByChmod}
 */
proto.proto.sftp.CommandByChmod.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.sftp.CommandByChmod;
  return proto.proto.sftp.CommandByChmod.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.sftp.CommandByChmod} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.sftp.CommandByChmod}
 */
proto.proto.sftp.CommandByChmod.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPermissions(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.sftp.CommandByChmod.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.sftp.CommandByChmod.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.sftp.CommandByChmod} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.sftp.CommandByChmod.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPermissions();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 permissions = 1;
 * @return {number}
 */
proto.proto.sftp.CommandByChmod.prototype.getPermissions = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.sftp.CommandByChmod} returns this
 */
proto.proto.sftp.CommandByChmod.prototype.setPermissions = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string path = 2;
 * @return {string}
 */
proto.proto.sftp.CommandByChmod.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.sftp.CommandByChmod} returns this
 */
proto.proto.sftp.CommandByChmod.prototype.setPath = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.sftp.CommandByMkdir.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.sftp.CommandByMkdir.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.sftp.CommandByMkdir} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.sftp.CommandByMkdir.toObject = function(includeInstance, msg) {
  var f, obj = {
    path: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.sftp.CommandByMkdir}
 */
proto.proto.sftp.CommandByMkdir.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.sftp.CommandByMkdir;
  return proto.proto.sftp.CommandByMkdir.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.sftp.CommandByMkdir} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.sftp.CommandByMkdir}
 */
proto.proto.sftp.CommandByMkdir.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.sftp.CommandByMkdir.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.sftp.CommandByMkdir.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.sftp.CommandByMkdir} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.sftp.CommandByMkdir.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string path = 1;
 * @return {string}
 */
proto.proto.sftp.CommandByMkdir.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.sftp.CommandByMkdir} returns this
 */
proto.proto.sftp.CommandByMkdir.prototype.setPath = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.sftp.CommandByRmdir.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.sftp.CommandByRmdir.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.sftp.CommandByRmdir} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.sftp.CommandByRmdir.toObject = function(includeInstance, msg) {
  var f, obj = {
    path: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.sftp.CommandByRmdir}
 */
proto.proto.sftp.CommandByRmdir.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.sftp.CommandByRmdir;
  return proto.proto.sftp.CommandByRmdir.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.sftp.CommandByRmdir} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.sftp.CommandByRmdir}
 */
proto.proto.sftp.CommandByRmdir.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.sftp.CommandByRmdir.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.sftp.CommandByRmdir.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.sftp.CommandByRmdir} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.sftp.CommandByRmdir.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string path = 1;
 * @return {string}
 */
proto.proto.sftp.CommandByRmdir.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.sftp.CommandByRmdir} returns this
 */
proto.proto.sftp.CommandByRmdir.prototype.setPath = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.sftp.CommandByRm.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.sftp.CommandByRm.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.sftp.CommandByRm} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.sftp.CommandByRm.toObject = function(includeInstance, msg) {
  var f, obj = {
    path: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.sftp.CommandByRm}
 */
proto.proto.sftp.CommandByRm.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.sftp.CommandByRm;
  return proto.proto.sftp.CommandByRm.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.sftp.CommandByRm} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.sftp.CommandByRm}
 */
proto.proto.sftp.CommandByRm.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.sftp.CommandByRm.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.sftp.CommandByRm.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.sftp.CommandByRm} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.sftp.CommandByRm.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string path = 1;
 * @return {string}
 */
proto.proto.sftp.CommandByRm.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.sftp.CommandByRm} returns this
 */
proto.proto.sftp.CommandByRm.prototype.setPath = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.sftp.CommandByRename.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.sftp.CommandByRename.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.sftp.CommandByRename} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.sftp.CommandByRename.toObject = function(includeInstance, msg) {
  var f, obj = {
    oldpath: jspb.Message.getFieldWithDefault(msg, 1, ""),
    newpath: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.sftp.CommandByRename}
 */
proto.proto.sftp.CommandByRename.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.sftp.CommandByRename;
  return proto.proto.sftp.CommandByRename.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.sftp.CommandByRename} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.sftp.CommandByRename}
 */
proto.proto.sftp.CommandByRename.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOldpath(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewpath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.sftp.CommandByRename.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.sftp.CommandByRename.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.sftp.CommandByRename} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.sftp.CommandByRename.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOldpath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNewpath();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string oldPath = 1;
 * @return {string}
 */
proto.proto.sftp.CommandByRename.prototype.getOldpath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.sftp.CommandByRename} returns this
 */
proto.proto.sftp.CommandByRename.prototype.setOldpath = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string newPath = 2;
 * @return {string}
 */
proto.proto.sftp.CommandByRename.prototype.getNewpath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.sftp.CommandByRename} returns this
 */
proto.proto.sftp.CommandByRename.prototype.setNewpath = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.sftp.CommandByLn.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.sftp.CommandByLn.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.sftp.CommandByLn} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.sftp.CommandByLn.toObject = function(includeInstance, msg) {
  var f, obj = {
    oldpath: jspb.Message.getFieldWithDefault(msg, 1, ""),
    newpath: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.sftp.CommandByLn}
 */
proto.proto.sftp.CommandByLn.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.sftp.CommandByLn;
  return proto.proto.sftp.CommandByLn.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.sftp.CommandByLn} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.sftp.CommandByLn}
 */
proto.proto.sftp.CommandByLn.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOldpath(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewpath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.sftp.CommandByLn.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.sftp.CommandByLn.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.sftp.CommandByLn} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.sftp.CommandByLn.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOldpath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNewpath();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string oldPath = 1;
 * @return {string}
 */
proto.proto.sftp.CommandByLn.prototype.getOldpath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.sftp.CommandByLn} returns this
 */
proto.proto.sftp.CommandByLn.prototype.setOldpath = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string newPath = 2;
 * @return {string}
 */
proto.proto.sftp.CommandByLn.prototype.getNewpath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.sftp.CommandByLn} returns this
 */
proto.proto.sftp.CommandByLn.prototype.setNewpath = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.sftp.CommandByLs.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.sftp.CommandByLs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.sftp.CommandByLs} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.sftp.CommandByLs.toObject = function(includeInstance, msg) {
  var f, obj = {
    path: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.sftp.CommandByLs}
 */
proto.proto.sftp.CommandByLs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.sftp.CommandByLs;
  return proto.proto.sftp.CommandByLs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.sftp.CommandByLs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.sftp.CommandByLs}
 */
proto.proto.sftp.CommandByLs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.sftp.CommandByLs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.sftp.CommandByLs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.sftp.CommandByLs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.sftp.CommandByLs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string path = 1;
 * @return {string}
 */
proto.proto.sftp.CommandByLs.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.sftp.CommandByLs} returns this
 */
proto.proto.sftp.CommandByLs.prototype.setPath = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.sftp.CommandByStat.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.sftp.CommandByStat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.sftp.CommandByStat} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.sftp.CommandByStat.toObject = function(includeInstance, msg) {
  var f, obj = {
    path: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.sftp.CommandByStat}
 */
proto.proto.sftp.CommandByStat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.sftp.CommandByStat;
  return proto.proto.sftp.CommandByStat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.sftp.CommandByStat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.sftp.CommandByStat}
 */
proto.proto.sftp.CommandByStat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.sftp.CommandByStat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.sftp.CommandByStat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.sftp.CommandByStat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.sftp.CommandByStat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string path = 1;
 * @return {string}
 */
proto.proto.sftp.CommandByStat.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.sftp.CommandByStat} returns this
 */
proto.proto.sftp.CommandByStat.prototype.setPath = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.sftp.CommandByLstat.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.sftp.CommandByLstat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.sftp.CommandByLstat} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.sftp.CommandByLstat.toObject = function(includeInstance, msg) {
  var f, obj = {
    path: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.sftp.CommandByLstat}
 */
proto.proto.sftp.CommandByLstat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.sftp.CommandByLstat;
  return proto.proto.sftp.CommandByLstat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.sftp.CommandByLstat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.sftp.CommandByLstat}
 */
proto.proto.sftp.CommandByLstat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.sftp.CommandByLstat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.sftp.CommandByLstat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.sftp.CommandByLstat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.sftp.CommandByLstat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string path = 1;
 * @return {string}
 */
proto.proto.sftp.CommandByLstat.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.sftp.CommandByLstat} returns this
 */
proto.proto.sftp.CommandByLstat.prototype.setPath = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.sftp.CommandByPut.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.sftp.CommandByPut.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.sftp.CommandByPut} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.sftp.CommandByPut.toObject = function(includeInstance, msg) {
  var f, obj = {
    path: jspb.Message.getFieldWithDefault(msg, 1, ""),
    filename: jspb.Message.getFieldWithDefault(msg, 2, ""),
    filesize: jspb.Message.getFieldWithDefault(msg, 3, 0),
    contents: msg.getContents_asB64(),
    offset: jspb.Message.getFieldWithDefault(msg, 5, 0),
    last: jspb.Message.getBooleanFieldWithDefault(msg, 6, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.sftp.CommandByPut}
 */
proto.proto.sftp.CommandByPut.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.sftp.CommandByPut;
  return proto.proto.sftp.CommandByPut.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.sftp.CommandByPut} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.sftp.CommandByPut}
 */
proto.proto.sftp.CommandByPut.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilename(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFilesize(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContents(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOffset(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLast(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.sftp.CommandByPut.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.sftp.CommandByPut.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.sftp.CommandByPut} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.sftp.CommandByPut.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFilename();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFilesize();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getContents_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getOffset();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getLast();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * optional string path = 1;
 * @return {string}
 */
proto.proto.sftp.CommandByPut.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.sftp.CommandByPut} returns this
 */
proto.proto.sftp.CommandByPut.prototype.setPath = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string fileName = 2;
 * @return {string}
 */
proto.proto.sftp.CommandByPut.prototype.getFilename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.sftp.CommandByPut} returns this
 */
proto.proto.sftp.CommandByPut.prototype.setFilename = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 fileSize = 3;
 * @return {number}
 */
proto.proto.sftp.CommandByPut.prototype.getFilesize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.sftp.CommandByPut} returns this
 */
proto.proto.sftp.CommandByPut.prototype.setFilesize = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes contents = 4;
 * @return {!(string|Uint8Array)}
 */
proto.proto.sftp.CommandByPut.prototype.getContents = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes contents = 4;
 * This is a type-conversion wrapper around `getContents()`
 * @return {string}
 */
proto.proto.sftp.CommandByPut.prototype.getContents_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContents()));
};


/**
 * optional bytes contents = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContents()`
 * @return {!Uint8Array}
 */
proto.proto.sftp.CommandByPut.prototype.getContents_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContents()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.proto.sftp.CommandByPut} returns this
 */
proto.proto.sftp.CommandByPut.prototype.setContents = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional int64 offset = 5;
 * @return {number}
 */
proto.proto.sftp.CommandByPut.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.sftp.CommandByPut} returns this
 */
proto.proto.sftp.CommandByPut.prototype.setOffset = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional bool last = 6;
 * @return {boolean}
 */
proto.proto.sftp.CommandByPut.prototype.getLast = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.proto.sftp.CommandByPut} returns this
 */
proto.proto.sftp.CommandByPut.prototype.setLast = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.sftp.CommandByPutDirect.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.sftp.CommandByPutDirect.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.sftp.CommandByPutDirect} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.sftp.CommandByPutDirect.toObject = function(includeInstance, msg) {
  var f, obj = {
    path: jspb.Message.getFieldWithDefault(msg, 1, ""),
    filename: jspb.Message.getFieldWithDefault(msg, 2, ""),
    filesize: jspb.Message.getFieldWithDefault(msg, 3, 0),
    contents: msg.getContents_asB64(),
    offset: jspb.Message.getFieldWithDefault(msg, 5, 0),
    last: jspb.Message.getBooleanFieldWithDefault(msg, 6, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.sftp.CommandByPutDirect}
 */
proto.proto.sftp.CommandByPutDirect.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.sftp.CommandByPutDirect;
  return proto.proto.sftp.CommandByPutDirect.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.sftp.CommandByPutDirect} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.sftp.CommandByPutDirect}
 */
proto.proto.sftp.CommandByPutDirect.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilename(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFilesize(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContents(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOffset(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLast(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.sftp.CommandByPutDirect.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.sftp.CommandByPutDirect.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.sftp.CommandByPutDirect} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.sftp.CommandByPutDirect.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFilename();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFilesize();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getContents_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getOffset();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getLast();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * optional string path = 1;
 * @return {string}
 */
proto.proto.sftp.CommandByPutDirect.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.sftp.CommandByPutDirect} returns this
 */
proto.proto.sftp.CommandByPutDirect.prototype.setPath = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string fileName = 2;
 * @return {string}
 */
proto.proto.sftp.CommandByPutDirect.prototype.getFilename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.sftp.CommandByPutDirect} returns this
 */
proto.proto.sftp.CommandByPutDirect.prototype.setFilename = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 fileSize = 3;
 * @return {number}
 */
proto.proto.sftp.CommandByPutDirect.prototype.getFilesize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.sftp.CommandByPutDirect} returns this
 */
proto.proto.sftp.CommandByPutDirect.prototype.setFilesize = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes contents = 4;
 * @return {!(string|Uint8Array)}
 */
proto.proto.sftp.CommandByPutDirect.prototype.getContents = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes contents = 4;
 * This is a type-conversion wrapper around `getContents()`
 * @return {string}
 */
proto.proto.sftp.CommandByPutDirect.prototype.getContents_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContents()));
};


/**
 * optional bytes contents = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContents()`
 * @return {!Uint8Array}
 */
proto.proto.sftp.CommandByPutDirect.prototype.getContents_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContents()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.proto.sftp.CommandByPutDirect} returns this
 */
proto.proto.sftp.CommandByPutDirect.prototype.setContents = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional int64 offset = 5;
 * @return {number}
 */
proto.proto.sftp.CommandByPutDirect.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.sftp.CommandByPutDirect} returns this
 */
proto.proto.sftp.CommandByPutDirect.prototype.setOffset = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional bool last = 6;
 * @return {boolean}
 */
proto.proto.sftp.CommandByPutDirect.prototype.getLast = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.proto.sftp.CommandByPutDirect} returns this
 */
proto.proto.sftp.CommandByPutDirect.prototype.setLast = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.sftp.CommandByGet.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.sftp.CommandByGet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.sftp.CommandByGet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.sftp.CommandByGet.toObject = function(includeInstance, msg) {
  var f, obj = {
    path: jspb.Message.getFieldWithDefault(msg, 1, ""),
    filename: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.sftp.CommandByGet}
 */
proto.proto.sftp.CommandByGet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.sftp.CommandByGet;
  return proto.proto.sftp.CommandByGet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.sftp.CommandByGet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.sftp.CommandByGet}
 */
proto.proto.sftp.CommandByGet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilename(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.sftp.CommandByGet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.sftp.CommandByGet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.sftp.CommandByGet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.sftp.CommandByGet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFilename();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string path = 1;
 * @return {string}
 */
proto.proto.sftp.CommandByGet.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.sftp.CommandByGet} returns this
 */
proto.proto.sftp.CommandByGet.prototype.setPath = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string fileName = 2;
 * @return {string}
 */
proto.proto.sftp.CommandByGet.prototype.getFilename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.sftp.CommandByGet} returns this
 */
proto.proto.sftp.CommandByGet.prototype.setFilename = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.sftp.CommandByGetDirect.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.sftp.CommandByGetDirect.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.sftp.CommandByGetDirect} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.sftp.CommandByGetDirect.toObject = function(includeInstance, msg) {
  var f, obj = {
    path: jspb.Message.getFieldWithDefault(msg, 1, ""),
    filename: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.sftp.CommandByGetDirect}
 */
proto.proto.sftp.CommandByGetDirect.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.sftp.CommandByGetDirect;
  return proto.proto.sftp.CommandByGetDirect.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.sftp.CommandByGetDirect} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.sftp.CommandByGetDirect}
 */
proto.proto.sftp.CommandByGetDirect.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilename(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.sftp.CommandByGetDirect.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.sftp.CommandByGetDirect.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.sftp.CommandByGetDirect} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.sftp.CommandByGetDirect.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFilename();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string path = 1;
 * @return {string}
 */
proto.proto.sftp.CommandByGetDirect.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.sftp.CommandByGetDirect} returns this
 */
proto.proto.sftp.CommandByGetDirect.prototype.setPath = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string fileName = 2;
 * @return {string}
 */
proto.proto.sftp.CommandByGetDirect.prototype.getFilename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.sftp.CommandByGetDirect} returns this
 */
proto.proto.sftp.CommandByGetDirect.prototype.setFilename = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.sftp.CommandByExit.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.sftp.CommandByExit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.sftp.CommandByExit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.sftp.CommandByExit.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.sftp.CommandByExit}
 */
proto.proto.sftp.CommandByExit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.sftp.CommandByExit;
  return proto.proto.sftp.CommandByExit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.sftp.CommandByExit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.sftp.CommandByExit}
 */
proto.proto.sftp.CommandByExit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.sftp.CommandByExit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.sftp.CommandByExit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.sftp.CommandByExit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.sftp.CommandByExit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.sftp.CommandByQuit.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.sftp.CommandByQuit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.sftp.CommandByQuit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.sftp.CommandByQuit.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.sftp.CommandByQuit}
 */
proto.proto.sftp.CommandByQuit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.sftp.CommandByQuit;
  return proto.proto.sftp.CommandByQuit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.sftp.CommandByQuit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.sftp.CommandByQuit}
 */
proto.proto.sftp.CommandByQuit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.sftp.CommandByQuit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.sftp.CommandByQuit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.sftp.CommandByQuit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.sftp.CommandByQuit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.sftp.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.sftp.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.sftp.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.sftp.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0),
    body: msg.getBody_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.sftp.Response}
 */
proto.proto.sftp.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.sftp.Response;
  return proto.proto.sftp.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.sftp.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.sftp.Response}
 */
proto.proto.sftp.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.proto.sftp.Response.Types} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {!proto.proto.sftp.Response.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBody(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.sftp.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.sftp.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.sftp.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.sftp.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getBody_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.proto.sftp.Response.Types = {
  UNKNOWN: 0,
  CONNECT: 1,
  DISCONNECT: 2,
  MESSAGE: 3,
  FILE: 4
};

/**
 * @enum {number}
 */
proto.proto.sftp.Response.Status = {
  UNKNOWN: 0,
  OK: 1,
  FAIL: 2,
  READY: 3
};

/**
 * optional Types type = 1;
 * @return {!proto.proto.sftp.Response.Types}
 */
proto.proto.sftp.Response.prototype.getType = function() {
  return /** @type {!proto.proto.sftp.Response.Types} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.proto.sftp.Response.Types} value
 * @return {!proto.proto.sftp.Response} returns this
 */
proto.proto.sftp.Response.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Status status = 2;
 * @return {!proto.proto.sftp.Response.Status}
 */
proto.proto.sftp.Response.prototype.getStatus = function() {
  return /** @type {!proto.proto.sftp.Response.Status} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.proto.sftp.Response.Status} value
 * @return {!proto.proto.sftp.Response} returns this
 */
proto.proto.sftp.Response.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional bytes body = 3;
 * @return {!(string|Uint8Array)}
 */
proto.proto.sftp.Response.prototype.getBody = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes body = 3;
 * This is a type-conversion wrapper around `getBody()`
 * @return {string}
 */
proto.proto.sftp.Response.prototype.getBody_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBody()));
};


/**
 * optional bytes body = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBody()`
 * @return {!Uint8Array}
 */
proto.proto.sftp.Response.prototype.getBody_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBody()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.proto.sftp.Response} returns this
 */
proto.proto.sftp.Response.prototype.setBody = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.sftp.ConnectResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.sftp.ConnectResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.sftp.ConnectResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.sftp.ConnectResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    status: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.sftp.ConnectResponse}
 */
proto.proto.sftp.ConnectResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.sftp.ConnectResponse;
  return proto.proto.sftp.ConnectResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.sftp.ConnectResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.sftp.ConnectResponse}
 */
proto.proto.sftp.ConnectResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.sftp.ConnectResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.sftp.ConnectResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.sftp.ConnectResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.sftp.ConnectResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.proto.sftp.ConnectResponse.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.sftp.ConnectResponse} returns this
 */
proto.proto.sftp.ConnectResponse.prototype.setUuid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string status = 2;
 * @return {string}
 */
proto.proto.sftp.ConnectResponse.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.sftp.ConnectResponse} returns this
 */
proto.proto.sftp.ConnectResponse.prototype.setStatus = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.sftp.DisconnectResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.sftp.DisconnectResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.sftp.DisconnectResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.sftp.DisconnectResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    status: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.sftp.DisconnectResponse}
 */
proto.proto.sftp.DisconnectResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.sftp.DisconnectResponse;
  return proto.proto.sftp.DisconnectResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.sftp.DisconnectResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.sftp.DisconnectResponse}
 */
proto.proto.sftp.DisconnectResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.sftp.DisconnectResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.sftp.DisconnectResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.sftp.DisconnectResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.sftp.DisconnectResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.proto.sftp.DisconnectResponse.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.sftp.DisconnectResponse} returns this
 */
proto.proto.sftp.DisconnectResponse.prototype.setUuid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string status = 2;
 * @return {string}
 */
proto.proto.sftp.DisconnectResponse.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.sftp.DisconnectResponse} returns this
 */
proto.proto.sftp.DisconnectResponse.prototype.setStatus = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.sftp.MessageResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.sftp.MessageResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.sftp.MessageResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.sftp.MessageResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    status: jspb.Message.getFieldWithDefault(msg, 2, ""),
    result: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.sftp.MessageResponse}
 */
proto.proto.sftp.MessageResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.sftp.MessageResponse;
  return proto.proto.sftp.MessageResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.sftp.MessageResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.sftp.MessageResponse}
 */
proto.proto.sftp.MessageResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.sftp.MessageResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.sftp.MessageResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.sftp.MessageResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.sftp.MessageResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getResult();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.proto.sftp.MessageResponse.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.sftp.MessageResponse} returns this
 */
proto.proto.sftp.MessageResponse.prototype.setUuid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string status = 2;
 * @return {string}
 */
proto.proto.sftp.MessageResponse.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.sftp.MessageResponse} returns this
 */
proto.proto.sftp.MessageResponse.prototype.setStatus = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string result = 3;
 * @return {string}
 */
proto.proto.sftp.MessageResponse.prototype.getResult = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.sftp.MessageResponse} returns this
 */
proto.proto.sftp.MessageResponse.prototype.setResult = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.sftp.FileResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.sftp.FileResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.sftp.FileResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.sftp.FileResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    offset: jspb.Message.getFieldWithDefault(msg, 2, 0),
    filesize: jspb.Message.getFieldWithDefault(msg, 3, 0),
    contents: msg.getContents_asB64(),
    last: jspb.Message.getBooleanFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.sftp.FileResponse}
 */
proto.proto.sftp.FileResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.sftp.FileResponse;
  return proto.proto.sftp.FileResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.sftp.FileResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.sftp.FileResponse}
 */
proto.proto.sftp.FileResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOffset(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFilesize(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContents(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLast(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.sftp.FileResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.sftp.FileResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.sftp.FileResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.sftp.FileResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOffset();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getFilesize();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getContents_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getLast();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.proto.sftp.FileResponse.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.sftp.FileResponse} returns this
 */
proto.proto.sftp.FileResponse.prototype.setUuid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 offset = 2;
 * @return {number}
 */
proto.proto.sftp.FileResponse.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.sftp.FileResponse} returns this
 */
proto.proto.sftp.FileResponse.prototype.setOffset = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 fileSize = 3;
 * @return {number}
 */
proto.proto.sftp.FileResponse.prototype.getFilesize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.sftp.FileResponse} returns this
 */
proto.proto.sftp.FileResponse.prototype.setFilesize = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes contents = 4;
 * @return {!(string|Uint8Array)}
 */
proto.proto.sftp.FileResponse.prototype.getContents = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes contents = 4;
 * This is a type-conversion wrapper around `getContents()`
 * @return {string}
 */
proto.proto.sftp.FileResponse.prototype.getContents_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContents()));
};


/**
 * optional bytes contents = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContents()`
 * @return {!Uint8Array}
 */
proto.proto.sftp.FileResponse.prototype.getContents_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContents()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.proto.sftp.FileResponse} returns this
 */
proto.proto.sftp.FileResponse.prototype.setContents = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional bool last = 5;
 * @return {boolean}
 */
proto.proto.sftp.FileResponse.prototype.getLast = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.proto.sftp.FileResponse} returns this
 */
proto.proto.sftp.FileResponse.prototype.setLast = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


goog.object.extend(exports, proto.proto.sftp);
